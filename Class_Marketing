
import os
import json
import numpy as np
import pandas as pd
from typing import Dict, Any, Optional, List, Union, Tuple # Union, Tuple を追加
from datetime import datetime
from dataclasses import dataclass

# 統一されたプロファイル定義 (修正1)
UNIFIED_PROFILES = {
    "natural": {
        "buy_threshold": 2, "sell_threshold": 2, "vix_threshold": 25,
        "confidence_threshold": 0.6, "ai_weight": 2.0,
        "short_trend_threshold_pct": 0.5, "error_accept_threshold_pct": 8.0,
        "profile_description": "標準的なバランス型。基本閾値でシグナル判定。" # 追記: 説明も統一管理へ
    },
    "aggressive": {
        "buy_threshold": 1, "sell_threshold": 3, "vix_threshold": 30,
        "confidence_threshold": 0.4, "ai_weight": 1.5,
        "short_trend_threshold_pct": 0.2, "error_accept_threshold_pct": 10.0,
        "profile_description": "積極型。買い閾値低め、VIX許容高め。" # 追記
    },
    "conservative": {  # passive → conservative に統一 (修正2)
        "buy_threshold": 3, "sell_threshold": 1, "vix_threshold": 20,
        "confidence_threshold": 0.8, "ai_weight": 3.0,
        "short_trend_threshold_pct": 1.0, "error_accept_threshold_pct": 6.0,
        "profile_description": "慎重型。買い閾値高め、VIX許容低め。" # 追記
    }
}

DEFAULT_SP500_PRICE = 5900  # デフォルト値統一 (修正1, 修正6)
VIX_DEFAULT = 20.0 # (修正1)
RSI_OVERSOLD = 30 # (修正1)
RSI_OVERBOUGHT = 70 # (修正1)


class AdvisorConfigLoader:
    """投資アドバイザー用設定ファイルの読み込み・プロファイル管理クラス"""
    DEFAULT_ADVISOR_CONFIG = {
        "report_filename_template": "market_analysis_report_{profile}.json",
        "profiles": UNIFIED_PROFILES, # (修正2) プロファイル設定統一
        "technical_analysis_settings": {
            "buy_signal_columns": ["golden_cross", "RSI_buy_signal", "MACD_buy_signal", "BB_buy_signal"],
            "sell_signal_columns": ["death_cross", "RSI_sell_signal", "MACD_sell_signal", "BB_sell_signal"],
            "recent_days_for_signal_count": 5,
            "ma_cross_signal_recency_days": 10
        },
    }

    def __init__(self, config_path: str = "advisor_config.json", logger_manager: Optional[LoggerManager] = None):
        self.logger = (logger_manager or APP_LOGGER_MANAGER).get_logger(self.__class__.__name__)
        self.config_path = config_path
        
        # Configクラス依存削除 (修正3)
        self.config_data = self._load_config_safe(config_path)
        self.config_data = self._deep_update(self.DEFAULT_ADVISOR_CONFIG.copy(), self.config_data)

        self.current_profile_name = "natural" # デフォルト
        self.set_profile(self.current_profile_name) # set_profile内でUNIFIED_PROFILESが使われる
        self.logger.info(f"アドバイザー設定を '{config_path}' からロード。現在のプロファイル: {self.current_profile_name}")

    def _load_config_safe(self, config_path: str) -> Dict[str, Any]: # (修正3)
        """設定ファイルの安全な読み込み"""
        try:
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                self.logger.warning(f"設定ファイル '{config_path}' が見つかりません。")
                return {}
        except Exception as e:
            self.logger.error(f"設定ファイル読み込みエラー: {e}")
            return {}

    def _deep_update(self, base_dict: Dict, update_dict: Dict) -> Dict: # (修正3)
        """辞書の深いマージ"""
        for key, value in update_dict.items():
            if isinstance(value, dict) and key in base_dict and isinstance(base_dict[key], dict):
                base_dict[key] = self._deep_update(base_dict[key], value)
            else:
                base_dict[key] = value
        return base_dict

    def set_profile(self, profile_name: str) -> bool:
        # profiles は UNIFIED_PROFILES を直接参照する形に変更 (config_data経由ではなく)
        if profile_name in UNIFIED_PROFILES:
            self.current_profile_name = profile_name
            self.logger.info(f"投資アドバイザープロファイルを '{profile_name}' に変更しました。")
            return True
        else:
            self.logger.warning(f"プロファイル '{profile_name}' は設定に存在しません。'{self.current_profile_name}' を維持します。")
            return False

    def get_profile_list(self) -> List[str]:
        return list(UNIFIED_PROFILES.keys())

    def get_current_profile_config(self) -> Dict[str, Any]:
        return UNIFIED_PROFILES.get(self.current_profile_name, UNIFIED_PROFILES["natural"])

    def get_profile_description(self) -> str:
        # UNIFIED_PROFILES から直接取得するように変更
        profile_conf = self.get_current_profile_config()
        return profile_conf.get("profile_description", "説明なし")

    def get_config_value(self, key_path: str, default: Optional[Any] = None) -> Any:
        keys = key_path.split('.')
        # 1. プロファイル固有設定 (UNIFIED_PROFILESから)
        val = self.get_current_profile_config()
        for key in keys:
            if isinstance(val, dict) and key in val:
                val = val[key]
            else:
                val = None
                break
        if val is not None:
            return val
        
        # 2. 共通設定 (self.config_data から。ここにはファイルからロードされた設定やDEFAULT_ADVISOR_CONFIGのprofiles以外の部分が入る)
        val_common = self.config_data
        for key in keys:
            if isinstance(val_common, dict) and key in val_common:
                val_common = val_common[key]
            else:
                return default # 共通にもなければデフォルト
        return val_common


class MarketDataAnalyzer:
    """市場データ分析のためのユーティリティ関数群"""
    
    def __init__(self, logger_manager: Optional[LoggerManager] = None):
        self.logger = (logger_manager or APP_LOGGER_MANAGER).get_logger(self.__class__.__name__)
    
    @staticmethod
    def get_nested_value(data: dict, keys: list, default=None):
        """ネストされた辞書から値を安全に取得"""
        for key in keys:
            if isinstance(data, dict) and key in data:
                data = data[key]
            else:
                return default
        return data
    
    def find_last_signal_date(self, df: pd.DataFrame, signal_column_name: str) -> Optional[pd.Timestamp]:
        """指定されたシグナル列の最後の発生日を検索"""
        if signal_column_name not in df.columns or df[signal_column_name].dtype != 'bool':
            self.logger.debug(f"シグナル列 '{signal_column_name}' 不在または非bool型。")
            return None
        try:
            true_signals = df.loc[df[signal_column_name]]
            return pd.Timestamp(true_signals.index.max()) if not true_signals.empty else None
        except Exception as e:
            self.logger.warning(f"'{signal_column_name}' 最終シグナル日検索エラー: {e}", exc_info=True)
            return None
    
    def is_date_within_recent_days(self, latest_market_date: pd.Timestamp,
                                   target_event_date: Optional[pd.Timestamp], recent_days_threshold: int) -> bool:
        """指定された日付が最近の閾値日数以内かを判定"""
        if target_event_date is None:
            return False
        if not (isinstance(latest_market_date, pd.Timestamp) and isinstance(target_event_date, pd.Timestamp)):
            self.logger.warning("is_date_within_recent_days: 日付がTimestamp型ではありません。")
            return False
        return (latest_market_date - target_event_date).days <= recent_days_threshold
    
    def calculate_trend_percentage(self, prediction_array: Any, period_name: str = "期間", 
                                  current_market_price: Optional[float] = None) -> float:
        """
        予測配列から現在価格を基準としたトレンド%を計算
        """
        try:
            if isinstance(prediction_array, pd.Series):
                values = prediction_array.dropna().values
            elif isinstance(prediction_array, np.ndarray):
                values = prediction_array.flatten()
            elif isinstance(prediction_array, list):
                values = np.array([v for v in prediction_array if v is not None and not np.isnan(v)])
            else:
                self.logger.warning(f"{period_name}トレンド計算: 未対応型 {type(prediction_array)}")
                return 0.0
            
            if len(values) < 1:
                self.logger.debug(f"{period_name}トレンド計算: データ点不足 ({len(values)})")
                return 0.0
            
            if current_market_price is not None and current_market_price > 0:
                base_price = current_market_price
            else:
                base_price = values[0]
            
            end_price = values[-1]
            
            if base_price <= 0 or np.isnan(base_price) or np.isnan(end_price):
                self.logger.debug(f"{period_name}トレンド計算: 無効な価格データ (base: {base_price}, end: {end_price})")
                return 0.0
            
            trend_pct = ((end_price - base_price) / base_price) * 100
            self.logger.debug(f"{period_name}トレンド計算: {base_price:.2f} → {end_price:.2f} = {trend_pct:.2f}%")
            return float(trend_pct)
            
        except Exception as e:
            self.logger.warning(f"{period_name}トレンド計算エラー: {e}", exc_info=True)
            return 0.0
    
    def get_sp500_dataframe(self, market_data_dict: Dict[str, Dict[str, Any]]) -> Optional[pd.DataFrame]:
        """市場データ辞書からS&P500 DataFrameを取得"""
        sp500_entry = market_data_dict.get("^GSPC")
        if not sp500_entry or "df" not in sp500_entry or sp500_entry["df"].empty:
            self.logger.error("S&P500 DataFrameが見つからないか空です。")
            return None
        return sp500_entry["df"]

class ReportGenerator:
    """レポートの生成（JSON保存、コンソール出力）"""
    def __init__(self, logger_manager: Optional[LoggerManager] = None):
        self.logger = (logger_manager or APP_LOGGER_MANAGER).get_logger(self.__class__.__name__)

    def save_report_to_json(self, report_data: Dict[str, Any], filename: str):
        self.logger.info(f"分析レポートを '{filename}' に保存試行...")
        try:
            save_dir = os.path.dirname(filename)
            if save_dir and not os.path.exists(save_dir): os.makedirs(save_dir)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
            self.logger.info(f"分析レポートを '{filename}' に保存しました。")
        except IOError as e: self.logger.error(f"レポート '{filename}' 保存IOエラー: {e}")
        except Exception as e: self.logger.error(f"レポート '{filename}' 保存中予期せぬエラー: {e}", exc_info=True)

    def print_basic_report_to_console(self, report_data: Dict[str, Any]):
        if not report_data: self.logger.warning("表示するレポートデータが空です。"); return
        try:
            print("\n" + "="*10 + " 📈 S&P500 積立タイミング分析レポート 📉 " + "="*10)
            print(f"分析日時: {report_data.get('analysis_datetime', 'N/A')}")
            
            # プロファイル名は InvestmentAdvisor から取得する report_data["metadata"]["profile"] を参照する想定
            # または、AdvisorConfigLoaderの機能で取得したものを渡す
            profile_name = report_data.get('profile_name', report_data.get("metadata", {}).get("profile", "未設定"))
            profile_desc = report_data.get('profile_description', 
                                           UNIFIED_PROFILES.get(profile_name, {}).get("profile_description", "N/A"))
            print(f"投資プロファイル: {profile_name} ({profile_desc})")
            print("-" * 60)

            status = report_data.get('market_status', report_data.get("market_analysis", {}).get("current_status", {}))
            print(f"■ S&P500 現状:")
            print(f"  - 最新価格 ({status.get('last_price_date', 'N/A')}): {status.get('current_price', 0.0):.2f}")
            if "VIX" in status: print(f"  - VIX指数: {status['VIX']:.2f}")

            preds = report_data.get('ai_predictions', report_data.get("market_analysis", {}).get("ai_predictions", {}))
            # errors は report_data.get("market_analysis", {}).get("ai_reliability", {}) を参照 (修正案 InvestmentAdvisor.generate_investment_advice 参照)
            errors = report_data.get('ai_error_rates', report_data.get("market_analysis", {}).get("ai_reliability", {}))
            print("\n■ AI価格予測 (LSTM):")

            # レポート表示エラー修正 (修正4) 及び キー名統一 (修正7) 対応
            # `preds` は `_get_ai_predictions_summary` の結果を想定 (price, trend_pct, confidence を含む)
            if "nextday" in preds and isinstance(preds["nextday"], dict): # キー名変更: nextday_price -> nextday
                price = preds["nextday"].get("price", 0.0) # price キーを期待
                trend = preds["nextday"].get("trend_pct", 0.0) # trend_pct も利用可能
                # 改善案の修正4は price を表示するが、元のコードは価格そのものを表示していた
                # ここでは改善案に従い price を表示し、MAPE も表示
                print(f"  - 翌日予測: {price:.2f} (トレンド: {trend:.2f}%, MAPE: {errors.get('nextday_mape', errors.get('next_mape',0.0)):.2f}%)") # errorsのキーも確認
            
            # short_term, long_term は元々 trend_pct を表示していたので、price があればそれも表示するように拡張
            short_p = preds.get('short_term', {})
            if short_p: # short_pが空でないことを確認
                short_price = short_p.get("price", None)
                display_price = f"{short_price:.2f}" if short_price is not None else "N/A"
                print(f"  - 短期({short_p.get('days',0)}日後予測価格): {display_price} (トレンド: {short_p.get('trend_pct', 0.0):.2f}%, MAPE: {errors.get('short_mape', errors.get('short_term_mape',0.0)):.2f}%)")
            
            long_p = preds.get('long_term', {})
            if long_p: # long_pが空でないことを確認
                long_price = long_p.get("price", None)
                display_price = f"{long_price:.2f}" if long_price is not None else "N/A"
                print(f"  - 長期({long_p.get('days',0)}日後予測価格): {display_price} (トレンド: {long_p.get('trend_pct', 0.0):.2f}%, MAPE: {errors.get('long_mape', errors.get('long_term_mape',0.0)):.2f}%)")

            tech = report_data.get('technical_signals', report_data.get("market_analysis", {}).get("technical_signals", {}))
            print("\n■ テクニカル分析サマリー:")
            print(f"  - MAクロス: {tech.get('ma_cross_status', '情報なし')}")
            recent_days = tech.get('recent_days_for_count',0)
            print(f"  - 直近{recent_days}日のシグナル:")
            buy_c = tech.get('buy_signal_counts', {}) # 元のコードではこのキーはないが、サマリー構造に合わせる
            sell_c = tech.get('sell_signal_counts', {})# 同上
            # total_buy_score, total_sell_scoreから表示を組み立てるのがより適切か
            buy_str = ', '.join([f'{k.replace("_signal","")}:{v}' for k,v in buy_c.items() if v>0]) or "なし"
            sell_str = ', '.join([f'{k.replace("_signal","")}:{v}' for k,v in sell_c.items() if v>0]) or "なし"
            print(f"    買いシグナル合計: {tech.get('total_buy_score',0)} ({buy_str})")
            print(f"    売りシグナル合計: {tech.get('total_sell_score',0)} ({sell_str})")

            print("-" * 60)
            # overall_advice は investment_advice.primary_action や profile_adjusted_advice.advice_text を参照
            advice_section = report_data.get("investment_advice", {})
            overall_advice_text = advice_section.get("profile_adjusted_advice", {}).get("advice_text", 
                                advice_section.get("primary_action", "判断材料不足"))
            print(f"■ 総合積立アドバイス:\n  {overall_advice_text}")
            print("-" * 60 + "\n")
        except Exception as e: self.logger.error(f"レポートコンソール表示エラー: {e}", exc_info=True)


@dataclass
class MarketAssessment:
    """市場評価の総合結果"""
    trend: str
    confidence: float
    risk_level: str
    tech_score: float
    ai_reliability: float

class InvestmentAdvisor:
    """AI予測修正版投資アドバイザー"""
    
    # PROFILES と builtin_config は削除 (修正5)

    def __init__(self, market_data_dict: Dict, trained_models_results: Dict, 
                 logger_manager, # advisor_config_file パラメータ削除 (修正5)
                 initial_profile_name: str = "natural"):
        self.logger = logger_manager.get_logger(self.__class__.__name__)
        self.market_data_dict = market_data_dict
        self.trained_models_results = trained_models_results
        self.current_profile = initial_profile_name
        
        # 統一されたプロファイル定義のみ使用 (修正5)
        self.profile_config = UNIFIED_PROFILES.get(initial_profile_name, UNIFIED_PROFILES["natural"])
        
        self.sp500_df = self._get_sp500_data()
        self.calculation_errors = []
        
        self.logger.info(f"利用可能な市場データキー: {list(self.market_data_dict.keys())}")
        self.logger.info(f"利用可能なモデル結果キー: {list(self.trained_models_results.keys())}")
        self._debug_ai_predictions_detailed()
        
        self.logger.info(f"InvestmentAdvisor初期化完了 - プロファイル: {self.current_profile}")

    def _extract_prediction_prices(self): # このメソッドは generate_investment_report で直接使用されることがある
        """各モデルの予測価格を抽出"""
        prediction_prices = {}
        current_price_fallback = DEFAULT_SP500_PRICE # (修正6)
        if not self.sp500_df.empty:
            current_price_fallback = self.sp500_df['Close'].iloc[-1]

        try:
            if 'nextday' in self.trained_models_results:
                nextday_result = self.trained_models_results['nextday']
                if 'latest_prediction_original' in nextday_result:
                    nextday_pred = nextday_result['latest_prediction_original']
                    price_val = 0
                    if isinstance(nextday_pred, (list, np.ndarray)) and len(nextday_pred) > 0:
                        price_val = float(nextday_pred[0])
                    elif isinstance(nextday_pred, (int, float)):
                        price_val = float(nextday_pred)
                    if price_val != 0:
                         prediction_prices['nextday'] = {
                            'price': round(price_val, 2), 'period': '翌日'
                        }
            
            if 'short' in self.trained_models_results:
                short_result = self.trained_models_results['short']
                if 'latest_prediction_original' in short_result:
                    short_pred = short_result['latest_prediction_original']
                    if isinstance(short_pred, (list, np.ndarray)) and len(short_pred) > 0:
                        prediction_prices['short'] = {
                            'price': round(float(short_pred[-1]), 2), 'period': '20日後'
                        }
            
            if 'long' in self.trained_models_results:
                long_result = self.trained_models_results['long']
                if 'latest_prediction_original' in long_result:
                    long_pred = long_result['latest_prediction_original']
                    if isinstance(long_pred, (list, np.ndarray)) and len(long_pred) > 0:
                        raw_long_price = self._extract_long_term_prediction(long_pred)
                        current_price_for_val = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else DEFAULT_SP500_PRICE # (修正6)
                        validated_long_price = self._validate_prediction(current_price_for_val, raw_long_price, 'long')
                        prediction_prices['long'] = {
                            'price': round(float(validated_long_price), 2), 'period': '30日後'
                        }
                        
            self.logger.info(f"予測価格抽出完了: {prediction_prices}")
            return prediction_prices
            
        except Exception as e:
            self.logger.error(f"予測価格抽出エラー: {e}")
            return {}

    def _extract_long_term_prediction(self, long_pred_array):
        """長期予測の安定化 - ノイズ削減のため最後の期間の平均を使用"""
        try:
            if isinstance(long_pred_array, (list, np.ndarray)) and len(long_pred_array) > 20:
                stable_pred = np.mean(long_pred_array[-20:])
                original_pred = long_pred_array[-1]
                self.logger.debug(f"長期予測安定化: 元値={original_pred:.2f} → 安定化値={stable_pred:.2f}")
                return stable_pred
            elif len(long_pred_array) > 0:
                return long_pred_array[-1]
            else:
                self.logger.warning("長期予測配列が空です")
                return 0
        except Exception as e:
            self.logger.error(f"長期予測抽出エラー: {e}")
            return long_pred_array[-1] if len(long_pred_array) > 0 else 0

    def _validate_prediction(self, current_price: float, predicted_price: float, prediction_type: str) -> float:
        """予測値の妥当性をチェックし、異常値を補正"""
        try:
            if current_price == 0: # ゼロ除算を避ける
                self.logger.warning(f"{prediction_type}予測の検証: 現在価格が0のためスキップ")
                return predicted_price

            change_pct = ((predicted_price - current_price) / current_price) * 100
            thresholds = {'nextday': (-5, 5), 'short': (-15, 15), 'long': (-25, 25)}
            min_change, max_change = thresholds.get(prediction_type, (-30, 30))
            
            if change_pct < min_change or change_pct > max_change:
                self.logger.warning(f"{prediction_type}予測が異常値: {change_pct:.2f}% → 補正実行")
                corrected_change = np.sign(change_pct) * min(abs(change_pct), abs(max_change))
                corrected_price = current_price * (1 + corrected_change / 100)
                self.logger.info(f"{prediction_type}予測補正: {predicted_price:.2f} → {corrected_price:.2f}")
                return corrected_price
            
            self.logger.debug(f"{prediction_type}予測は妥当範囲内: {change_pct:.2f}%")
            return predicted_price
            
        except Exception as e:
            self.logger.error(f"予測値検証エラー: {e}")
            return current_price

    def _log_prediction_summary(self):
        """予測価格サマリーをログ出力"""
        try:
            prediction_prices = self._extract_prediction_prices()
            self.logger.info("=== AI予測価格サマリー ===")
            for model_name, pred_data in prediction_prices.items():
                self.logger.info(f"{model_name}モデル予測価格: ${pred_data['price']:,.2f} ({pred_data['period']})")
            
            if not self.sp500_df.empty:
                current_price = self.sp500_df['Close'].iloc[-1]
                self.logger.info(f"現在価格: ${current_price:,.2f}")
                if 'nextday' in prediction_prices:
                    change = prediction_prices['nextday']['price'] - current_price
                    if current_price != 0:
                        change_pct = (change / current_price) * 100
                        self.logger.info(f"翌日予測変化: ${change:+.2f} ({change_pct:+.2f}%)")
                    else:
                        self.logger.info(f"翌日予測変化: ${change:+.2f} (現在価格0のため%計算不可)")
        except Exception as e:
            self.logger.error(f"予測サマリーログエラー: {e}")

    def _display_enhanced_report(self, report_data: Dict[str, Any]):
        """強化されたレポート表示"""
        prediction_prices = self._extract_prediction_prices() # レポート表示用に最新の予測価格を取得
        
        print("\n" + "="*60)
        print("        🎯 AI投資分析レポート（強化版） 🎯")
        print("="*60)
        print(f"📅 生成日時: {report_data.get('metadata', {}).get('generated_at', datetime.now().isoformat())}")
        print(f"👤 投資プロファイル: {self.current_profile.upper()}")
        
        print("\n🔮 【AI予測価格】") # _extract_prediction_prices の結果を使用
        if 'nextday' in prediction_prices:
            print(f"翌日予測: ${prediction_prices['nextday']['price']:,.2f}")
        if 'short' in prediction_prices:
            print(f"短期予測（20日後）: ${prediction_prices['short']['price']:,.2f}")
        if 'long' in prediction_prices:
            print(f"長期予測（30日後）: ${prediction_prices['long']['price']:,.2f}")
        
        assessment = report_data.get("assessment", {})
        advice = report_data.get("investment_advice", {})
        market = report_data.get("market_analysis", {}).get("current_status", {})
        
        # AI予測分析は _get_ai_predictions_summary の結果 (trend_pct, confidence) を使用
        ai_predictions_summary = report_data.get("market_analysis", {}).get("ai_predictions", {})
        long_term_summary = ai_predictions_summary.get("long_term", {})
        ai_trend = long_term_summary.get("trend_pct", 0) # キー名統一(修正7)
        ai_confidence = long_term_summary.get("confidence", 0)
        
        print(f"\n🤖 【AI予測分析 (トレンドベース)】")
        print(f"長期トレンド予測: {ai_trend:+.2f}%")
        print(f"AI信頼度: {ai_confidence:.1%}")
        
        print(f"\n📊 【総合評価】")
        print(f"トレンド: {assessment.get('overall_trend', 'N/A').upper()}")
        print(f"信頼度: {assessment.get('confidence_score', 0):.1%}")
        print(f"リスク: {assessment.get('risk_level', 'N/A').upper()}")
        print(f"テクニカルスコア: {assessment.get('technical_score', 0):.2f}")
        print(f"AI信頼度 (総合評価時): {assessment.get('ai_reliability', 0):.1%}")
        
        print(f"\n💡 【推奨アクション】")
        print(f"アクション: {advice.get('primary_action', 'N/A')}")
        print(f"強度: {advice.get('action_strength', 'N/A')}")
        
        profile_advice = advice.get("profile_adjusted_advice", {})
        if profile_advice:
            print(f"アドバイス: {profile_advice.get('advice_text', 'N/A')}")
            print(f"推奨ポジションサイズ: {profile_advice.get('position_sizing', 'N/A')}")
        
        key_factors = advice.get("key_factors", [])
        if key_factors: print(f"\n🔍 【主要判断要因】"); [print(f"• {factor}") for factor in key_factors]
        
        warnings = advice.get("warnings", [])
        if warnings: print(f"\n⚠️ 【警告・注意事項】"); [print(f"{i}. {warning}") for i, warning in enumerate(warnings[:3], 1)]
        
        if market and "error" not in market:
            print(f"\n📈 【市場状況】")
            print(f"S&P500価格: ${market.get('current_price', 0):.2f}")
            print(f"日次変動: {market.get('daily_change', 0):+.2f}%")
            print(f"VIX指数: {market.get('VIX', 0):.1f} ({market.get('vix_level', 'N/A')})")
            print(f"5日ボラティリティ: {market.get('volatility_5d', 0):.1f}%")
        
        print("="*60)

    def _debug_ai_predictions_detailed(self):
        """AI予測データの詳細デバッグ"""
        self.logger.info("=== AI予測データ詳細分析 ===")
        for model_key, model_result in self.trained_models_results.items():
            self.logger.info(f"\n--- {model_key}モデル詳細 ---")
            if isinstance(model_result, dict):
                for key, value in model_result.items():
                    if isinstance(value, list): self.logger.info(f"  {key}: List[{len(value)}] - 最後の3つ: {value[-3:]}" if len(value)>0 else f"  {key}: 空のリスト")
                    elif isinstance(value, (int, float)): self.logger.info(f"  {key}: {value}")
                    else: self.logger.info(f"  {key}: {type(value)}")
                if 'y_pred_original_test' in model_result and 'y_test_original_test' in model_result:
                    pred = model_result['y_pred_original_test']; actual = model_result['y_test_original_test']
                    if isinstance(pred, list) and isinstance(actual, list) and len(pred)>0 and len(actual)>0 :
                        self.logger.info(f"  予測データ長: {len(pred)}, 実際データ長: {len(actual)}")
                        self.logger.info(f"  最後の予測値: {pred[-1]}, 最後の実際値: {actual[-1]}")
                if 'latest_prediction_original' in model_result: self.logger.info(f"  最新予測値: {model_result['latest_prediction_original']}")

    def _get_sp500_data(self) -> Optional[pd.DataFrame]:
        """S&P500データを安全に取得"""
        try:
            for key in ["^GSPC", "SP500", "SPX", "sp500"]:
                if key in self.market_data_dict:
                    data = self.market_data_dict[key]
                    if isinstance(data, dict) and "df" in data and data["df"] is not None and not data["df"].empty:
                        self.logger.info(f"S&P500データ読み込み成功 ({key}): {len(data['df'])}行")
                        return data["df"]
                    elif isinstance(data, pd.DataFrame) and not data.empty:
                        self.logger.info(f"S&P500データ読み込み成功 ({key}): {len(data)}行")
                        return data
            self.logger.error("S&P500データが見つかりません")
            return pd.DataFrame()
        except Exception as e:
            self.logger.error(f"S&P500データ取得エラー: {e}")
            return pd.DataFrame()

    # (修正4, 修正7 のための変更) _calculate_ai_prediction_from_model_data が予測価格も返すように変更
    def _calculate_ai_prediction_from_model_data(self, model_result: Dict, model_type: str) -> tuple[float, float, float]:
        """モデルデータからAI予測(トレンド%、信頼度、予測価格)を計算"""
        default_price = DEFAULT_SP500_PRICE # (修正6)
        if not self.sp500_df.empty:
            default_price = self.sp500_df['Close'].iloc[-1]

        try:
            current_price = default_price # 関数スコープで定義
            predicted_price_val = default_price # 予測価格のデフォルト

            # パターン1: latest_prediction_original
            if 'latest_prediction_original' in model_result:
                latest_pred_raw = model_result['latest_prediction_original']
                
                if isinstance(latest_pred_raw, (list, np.ndarray)) and len(latest_pred_raw) > 0:
                    predicted_price_val = latest_pred_raw[0] if model_type == 'nextday' else latest_pred_raw[-1]
                elif isinstance(latest_pred_raw, (int, float)):
                    predicted_price_val = latest_pred_raw
                
                if isinstance(predicted_price_val, (int, float)) and predicted_price_val != 0:
                    current_price_to_use = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else predicted_price_val
                    if current_price_to_use == 0: current_price_to_use = predicted_price_val # ゼロ除算回避
                    
                    change_pct = ((predicted_price_val - current_price_to_use) / current_price_to_use) * 100 if current_price_to_use != 0 else 0
                    mape = model_result.get('mape_test', 50)
                    confidence = max(0.1, min(0.95, (100 - mape) / 100))
                    self.logger.info(f"{model_type}: 最新予測={predicted_price_val:.2f}, 現在価格={current_price_to_use:.2f}, トレンド%={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence, float(predicted_price_val)
            
            # パターン2: y_pred_original_testとy_test_original_test
            if 'y_pred_original_test' in model_result and 'y_test_original_test' in model_result:
                pred_data = model_result['y_pred_original_test']
                actual_data = model_result['y_test_original_test']
                if isinstance(pred_data, list) and isinstance(actual_data, list) and len(pred_data) > 0:
                    predicted_price_val = pred_data[-1]
                    latest_actual = actual_data[-1] if len(actual_data) > 0 else predicted_price_val
                    if latest_actual == 0: latest_actual = predicted_price_val # ゼロ除算回避

                    change_pct = ((predicted_price_val - latest_actual) / latest_actual) * 100 if latest_actual !=0 else 0
                    mape = model_result.get('mape_test', 50)
                    confidence = max(0.1, min(0.95, (100 - mape) / 100))
                    self.logger.info(f"{model_type}: 予測={predicted_price_val:.2f}, 実際={latest_actual:.2f}, トレンド%={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence, float(predicted_price_val)
            
            # パターン3: predict_step
            if 'predict_step' in model_result:
                predict_step = model_result['predict_step']
                current_price_for_step = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else DEFAULT_SP500_PRICE # (修正6)
                
                if not self.sp500_df.empty and len(self.sp500_df) >= predict_step:
                    past_returns = self.sp500_df['Close'].pct_change().dropna().tail(predict_step)
                    avg_return = past_returns.mean()
                    predicted_price_val = current_price_for_step * (1 + avg_return * predict_step)
                    if current_price_for_step == 0: current_price_for_step = predicted_price_val # ゼロ除算回避
                    change_pct = ((predicted_price_val - current_price_for_step) / current_price_for_step) * 100 if current_price_for_step != 0 else 0
                    mape = model_result.get('mape_test', 30)
                    confidence = max(0.1, min(0.95, (100 - mape) / 100))
                    self.logger.info(f"{model_type}: 段階予測={predict_step}, トレンド%={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence, float(predicted_price_val)
            
            self.logger.warning(f"{model_type}: 予測データの計算に失敗")
            return 0.0, 0.5, default_price
            
        except Exception as e:
            self.logger.error(f"{model_type} AI予測計算エラー: {e}")
            return 0.0, 0.5, default_price

    def _get_ai_predictions_summary(self) -> tuple[Dict[str, Any], Dict[str, Any]]:
        """AI予測のサマリーを取得（修正版）"""
        predictions = {}
        errors = {}
        
        try:
            self.logger.info("=== AI予測サマリー生成開始（修正版） ===")
            for model_key, model_result in self.trained_models_results.items():
                if not isinstance(model_result, dict): continue
                self.logger.info(f"処理中のモデル: {model_key}")
                
                # _calculate_ai_prediction_from_model_data は (trend_pct, confidence, predicted_price) を返す (修正4, 修正7 対応)
                trend_pct, confidence, predicted_price = self._calculate_ai_prediction_from_model_data(model_result, model_key)
                
                mape = model_result.get('mape_test', 50)
                
                # キー名統一 (修正7): nextday_price -> nextday, change_pct -> trend_pct
                # 予測結果に price も含める (修正4 対応)
                current_pred_data = {"trend_pct": trend_pct, "confidence": confidence, "price": predicted_price}
                
                if 'long' in model_key.lower():
                    predictions["long_term"] = current_pred_data
                    errors[f"long_term_mape"] = mape # エラーキーも統一性を持たせる
                elif 'short' in model_key.lower():
                    predictions["short_term"] = current_pred_data
                    errors[f"short_term_mape"] = mape
                elif 'nextday' in model_key.lower() or 'next' in model_key.lower():
                    predictions["nextday"] = current_pred_data # キー名変更
                    errors[f"nextday_mape"] = mape # エラーキーも合わせる
                else: # デフォルトは長期扱い
                    predictions["long_term"] = current_pred_data
                    errors[f"long_term_mape"] = mape # (long_term_mapeが上書きされる可能性)

            if not predictions.get("long_term"): # 長期予測がない場合のフォールバック
                best_model_key = None; best_mape = float('inf')
                for mk, mr in self.trained_models_results.items():
                    if isinstance(mr, dict) and 'mape_test' in mr and mr.get('mape_test', 100) < best_mape:
                        best_mape = mr['mape_test']; best_model_key = mk
                if best_model_key:
                    trend_pct, confidence, predicted_price = self._calculate_ai_prediction_from_model_data(
                        self.trained_models_results[best_model_key], best_model_key
                    )
                    predictions["long_term"] = {"trend_pct": trend_pct, "confidence": confidence, "price": predicted_price}
                    errors["long_term_mape"] = best_mape
                    self.logger.info(f"最良モデル {best_model_key} から長期予測生成: {trend_pct:.2f}%")
            
            self.logger.info(f"最終的なAI予測: {predictions}")
            return predictions, errors
            
        except Exception as e:
            self.logger.error(f"AI予測サマリー取得エラー: {e}")
            return {}, {}

    def _get_vix_value(self) -> float:
        """VIX値を取得（S&P500データから直接取得を優先）"""
        try:
            if not self.sp500_df.empty and 'VIX' in self.sp500_df.columns:
                vix_series = self.sp500_df['VIX'].dropna()
                if len(vix_series) > 0: return float(vix_series.iloc[-1])
            
            for key in ["VIX", "^VIX", "vix", "volatility"]:
                if key in self.market_data_dict:
                    vix_data = self.market_data_dict[key]
                    if isinstance(vix_data, dict):
                        if "df" in vix_data and not vix_data["df"].empty and "Close" in vix_data["df"].columns:
                            return float(vix_data["df"]["Close"].iloc[-1])
                        elif "Close" in vix_data and isinstance(vix_data["Close"], list) and len(vix_data["Close"]) > 0:
                            return float(vix_data["Close"][-1])
                    elif isinstance(vix_data, (int, float)): return float(vix_data)
            
            if not self.sp500_df.empty: # S&P500データからボラティリティを計算して代用
                returns = self.sp500_df['Close'].pct_change().dropna().tail(20)
                if len(returns) > 0:
                    volatility = returns.std() * np.sqrt(252) * 100
                    estimated_vix = min(80, max(10, volatility))
                    self.logger.info(f"VIX推定値: {estimated_vix:.1f} (ボラティリティから計算)")
                    return estimated_vix
            
            self.logger.warning(f"VIX値が見つからないため、デフォルト値 {VIX_DEFAULT} を使用")
            return VIX_DEFAULT
            
        except Exception as e:
            self.logger.error(f"VIX取得エラー: {e}")
            return VIX_DEFAULT

    def _calculate_technical_indicators(self) -> Dict[str, Any]:
        """テクニカル指標を計算（S&P500データから直接取得を優先）"""
        if self.sp500_df.empty: return {}
        tech_data = {}
        try:
            # RSI
            if 'RSI' in self.sp500_df.columns: current_rsi = self.sp500_df['RSI'].iloc[-1]
            elif len(self.sp500_df) >= 14:
                delta = self.sp500_df['Close'].diff(); gain = (delta.where(delta > 0, 0)).rolling(window=14).mean(); loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
                rs = gain / loss; rsi_series = 100 - (100 / (1 + rs)); current_rsi = rsi_series.iloc[-1] if not rsi_series.empty else np.nan
            else: current_rsi = np.nan

            if pd.notna(current_rsi):
                tech_data["rsi_current"] = float(current_rsi)
                tech_data["rsi_signal"] = "過買い" if current_rsi >= RSI_OVERBOUGHT else ("過売り" if current_rsi <= RSI_OVERSOLD else "中立")
            
            # 移動平均線
            df = self.sp500_df.copy(); current_price = df['Close'].iloc[-1]
            ma_columns = [col for col in df.columns if col.startswith('MA') and col[2:].isdigit()]
            ma_signals = {}
            if ma_columns:
                for ma_col in ['MA5', 'MA20', 'MA50', 'MA60', 'MA120']:
                    if ma_col in df.columns and pd.notna(df[ma_col].iloc[-1]): ma_signals[f"price_vs_{ma_col.lower()}"] = "above" if current_price > df[ma_col].iloc[-1] else "below"
                if 'MA5' in df.columns and 'MA20' in df.columns and pd.notna(df['MA5'].iloc[-1]) and pd.notna(df['MA20'].iloc[-1]):
                    ma_signals["ma5_vs_ma20"] = "above" if df['MA5'].iloc[-1] > df['MA20'].iloc[-1] else "below"
            elif len(df) >= 50:
                df['MA5'] = df['Close'].rolling(5).mean(); df['MA20'] = df['Close'].rolling(20).mean(); df['MA50'] = df['Close'].rolling(50).mean()
                latest = df.iloc[-1]
                if pd.notna(latest['MA5']): ma_signals["price_vs_ma5"] = "above" if current_price > latest['MA5'] else "below"
                if pd.notna(latest['MA20']): ma_signals["price_vs_ma20"] = "above" if current_price > latest['MA20'] else "below"
                if pd.notna(latest['MA50']): ma_signals["price_vs_ma50"] = "above" if current_price > latest['MA50'] else "below"
                if pd.notna(latest['MA5']) and pd.notna(latest['MA20']): ma_signals["ma5_vs_ma20"] = "above" if latest['MA5'] > latest['MA20'] else "below"
            if ma_signals: tech_data["ma_signals"] = ma_signals
            
            # クロス
            if 'golden_cross' in self.sp500_df.columns and 'death_cross' in self.sp500_df.columns:
                recent_data = self.sp500_df.tail(30)
                tech_data["recent_cross"] = "golden" if recent_data['golden_cross'].any() else ("death" if recent_data['death_cross'].any() else "none")
            
            self.logger.info(f"テクニカル指標計算完了: {tech_data}")
            return tech_data
        except Exception as e: self.logger.error(f"テクニカル指標計算エラー: {e}"); return {}

    def _get_technical_signals_summary(self) -> Dict[str, Any]:
        """テクニカルシグナルのサマリー（改良版）"""
        summary = {"ma_cross_status": "MAクロスは30日以内になし", "total_buy_score": 0, "total_sell_score": 0, "recent_days_for_count": 15, "rsi_signal": "中立"}
        try:
            tech_indicators = self._calculate_technical_indicators(); summary.update(tech_indicators)
            buy_score, sell_score = 0, 0
            if "rsi_signal" in tech_indicators:
                if tech_indicators["rsi_signal"] == "過売り": buy_score += 3
                elif tech_indicators["rsi_signal"] == "過買い": sell_score += 3
                else: rsi_val = tech_indicators.get("rsi_current", 50); buy_score += 1 if rsi_val < 40 else (0); sell_score += 1 if rsi_val > 60 else (0)
            if "ma_signals" in tech_indicators:
                ma_s = tech_indicators["ma_signals"]
                above_c = sum(1 for k,v in ma_s.items() if k.startswith("price_vs_") and v == "above")
                below_c = sum(1 for k,v in ma_s.items() if k.startswith("price_vs_") and v == "below")
                buy_score += above_c if above_c > below_c else 0; sell_score += below_c if below_c > above_c else 0
                buy_score += 1 if ma_s.get("ma5_vs_ma20") == "above" else 0; sell_score += 1 if ma_s.get("ma5_vs_ma20") == "below" else 0
            if "recent_cross" in tech_indicators:
                if tech_indicators["recent_cross"] == "golden": buy_score += 2; summary["ma_cross_status"] = "直近ゴールデンクロス発生"
                elif tech_indicators["recent_cross"] == "death": sell_score += 2; summary["ma_cross_status"] = "直近デッドクロス発生"
            summary["total_buy_score"] = buy_score; summary["total_sell_score"] = sell_score
            self.logger.info(f"テクニカルサマリー: 買い={buy_score}, 売り={sell_score}")
            return summary
        except Exception as e: self.logger.error(f"テクニカル分析エラー: {e}"); return {"error": str(e)}

    def _generate_comprehensive_market_assessment(self, market_status: Dict, predictions: Dict, 
                                                  errors: Dict, tech_signals: Dict) -> MarketAssessment:
        """総合市場評価を生成（AI予測重視＋極端値抑制・重み調整版）"""
        try:
            # キー名統一 (修正7): nextday_price -> nextday. 内部キーは trend_pct.
            for period in ['nextday', 'short_term', 'long_term']: 
                pred = predictions.get(period, {})
                trend_pct_val = pred.get('trend_pct', 0) # すべて trend_pct で統一
                confidence = pred.get('confidence', 0.5)
                if abs(trend_pct_val) > 20: pred['confidence'] = confidence * 0.5
                elif abs(trend_pct_val) > 10: pred['confidence'] = confidence * 0.8
            
            # キー名統一 (修正7): weights のキーも nextday に変更
            weights = {'nextday': 0.4, 'short_term': 0.4, 'long_term': 0.2} 
            weighted_trend, total_weight = 0, 0
            for period in ['nextday', 'short_term', 'long_term']:
                pred = predictions.get(period, {})
                trend = pred.get('trend_pct', 0) # すべて trend_pct で統一
                conf = pred.get('confidence', 0)
                weight = weights[period] * conf
                weighted_trend += trend * weight; total_weight += weight
            final_trend = weighted_trend / total_weight if total_weight > 0 else 0
            final_confidence = total_weight / sum(weights.values()) if sum(weights.values()) > 0 else 0.5

            trend_label = "bearish" if final_trend < -3 else ("bullish" if final_trend > 3 else "neutral")
            buy_score, sell_score = tech_signals.get("total_buy_score", 0), tech_signals.get("total_sell_score", 0)

            if trend_label == "bullish" and sell_score > buy_score + 2: trend_label = "neutral"; final_confidence *= 0.8
            elif trend_label == "bearish" and buy_score > sell_score + 2: trend_label = "neutral"; final_confidence *= 0.8
            elif trend_label == "neutral":
                if buy_score > sell_score + 1: trend_label = "bullish"; final_confidence += 0.1
                elif sell_score > buy_score + 1: trend_label = "bearish"; final_confidence += 0.1
            
            vix_value, volatility = market_status.get("VIX", VIX_DEFAULT), market_status.get("volatility_5d", 0)
            risk_factors = (3 if vix_value > 30 else (2 if vix_value > 25 else (1 if vix_value > 20 else 0))) + \
                           (2 if volatility > 25 else (1 if volatility > 15 else 0)) + \
                           (1 if final_confidence < 0.4 else 0)
            risk_level = "high" if risk_factors >= 5 else ("medium" if risk_factors >= 2 else "low")
            
            tech_score = buy_score / (buy_score + sell_score) if (buy_score + sell_score) > 0 else 0.5
            result = MarketAssessment(trend=trend_label, confidence=max(0.1, min(0.9, final_confidence)),
                                      risk_level=risk_level, tech_score=max(0.0, min(1.0, tech_score)),
                                      ai_reliability=final_confidence)
            self.logger.info(f"総合評価: {trend_label}, 信頼度={result.confidence:.2f}, リスク={risk_level}")
            return result
        except Exception as e:
            self.logger.error(f"総合市場評価生成エラー: {e}", exc_info=True)
            return MarketAssessment("neutral", 0.5, "medium", 0.5, 0.5)

    # 未実装メソッド完成 (修正8)
    def _get_current_config(self) -> Dict[str, Any]:
        """現在の設定情報を取得"""
        return {
            "profile_name": self.current_profile,
            "profile_config": self.profile_config, # __init__ で UNIFIED_PROFILES から設定済み
            "available_profiles": list(UNIFIED_PROFILES.keys())
        }

    # 新規追加メソッド (修正8)
    def set_profile(self, profile_name: str) -> bool:
        """プロファイルの変更"""
        if profile_name in UNIFIED_PROFILES:
            self.current_profile = profile_name
            self.profile_config = UNIFIED_PROFILES[profile_name] # self.profile_config も更新
            self.logger.info(f"プロファイルを '{profile_name}' に変更しました。")
            return True
        else:
            self.logger.warning(f"プロファイル '{profile_name}' は存在しません。")
            return False

    def _get_current_profile_name(self) -> str: # 既存だが、_get_current_config と合わせて確認
        return self.current_profile

    def _get_current_market_status(self) -> Dict[str, Any]:
        if self.sp500_df is None or self.sp500_df.empty: return {"error": "データ不足"}
        try:
            latest_row = self.sp500_df.iloc[-1]; current_price = float(latest_row["Close"])
            daily_change = ((current_price - float(self.sp500_df["Close"].iloc[-2])) / float(self.sp500_df["Close"].iloc[-2])) * 100 if len(self.sp500_df) > 1 and float(self.sp500_df["Close"].iloc[-2]) != 0 else 0
            vix_value = self._get_vix_value()
            volatility_5d = float(self.sp500_df["Close"].pct_change().dropna().tail(5).std() * np.sqrt(252) * 100) if len(self.sp500_df) >= 5 else 0
            status = {"current_price": current_price, "last_price_date": self.sp500_df.index[-1].strftime("%Y-%m-%d"),
                      "volume": float(latest_row.get("Volume", 0)), "daily_change": daily_change,
                      "volatility_5d": volatility_5d, "VIX": vix_value, "vix_level": self._categorize_vix(vix_value)}
            self.logger.info(f"市場状況: 価格=${current_price:.2f}, 変動={daily_change:.2f}%, VIX={vix_value:.1f}")
            return status
        except Exception as e: self.logger.error(f"市場状況取得エラー: {e}"); return {"error": str(e)}

    def _categorize_vix(self, vix_value: float) -> str:
        if vix_value < 15: return "低位安定"
        elif vix_value < 25: return "通常範囲"
        elif vix_value < 35: return "警戒レベル"
        else: return "パニックレベル"

    def _generate_investment_advice_from_assessment(self, assessment: MarketAssessment) -> Dict[str, Any]:
        try:
            # _get_current_config() を使用してプロファイル設定を取得 (修正8)
            current_advisor_config = self._get_current_config()
            profile_specific_config = current_advisor_config["profile_config"]
            confidence_threshold = profile_specific_config.get("confidence_threshold", 0.6)
            
            predictions, _ = self._get_ai_predictions_summary()
            # キー名統一 (修正7): long_term の trend_pct を参照
            ai_trend = predictions.get("long_term", {}).get("trend_pct", 0)
            
            primary_action, action_strength, reason = "HOLD", "中", "明確なトレンドなし"
            if assessment.confidence < confidence_threshold:
                primary_action, action_strength, reason = "HOLD", "弱", f"信頼度{assessment.confidence:.1%}が閾値{confidence_threshold:.1%}未満"
            elif assessment.trend == "bullish" and assessment.risk_level != "high":
                if abs(ai_trend) > 1 and ai_trend > 0:
                    primary_action, action_strength, reason = "BUY", "強" if assessment.confidence > 0.8 and ai_trend > 3 else "中", f"上昇トレンド(AI: +{ai_trend:.1f}%)"
                else:
                    primary_action, action_strength, reason = "BUY", "弱", "テクニカル上昇だがAI予測不明確"
            elif assessment.trend == "bearish" or (abs(ai_trend) > 1 and ai_trend < -2):
                primary_action, action_strength, reason = "SELL", "強" if ai_trend < -3 else "中", f"下降トレンド(AI: {ai_trend:.1f}%)"
            
            warnings = []
            if ai_trend < -5: warnings.append(f"🚨 AI予測が大幅下落警告: {ai_trend:.1f}%")
            elif ai_trend < -2: warnings.append(f"⚠️ AI予測が下落示唆: {ai_trend:.1f}%")
            elif ai_trend > 5: warnings.append(f"📈 AI予測が大幅上昇示唆: +{ai_trend:.1f}%")
            if assessment.risk_level == "high": warnings.append("⚠️ 高リスク市場環境")
            if assessment.confidence < 0.4: warnings.append("⚠️ 予測信頼度 低")
            if assessment.ai_reliability < 0.4: warnings.append("⚠️ AI予測信頼性 低")
            warnings.extend(["投資は自己責任で。", "余裕資金での投資を。"])
            
            return {"primary_action": primary_action, "action_strength": action_strength, "risk_assessment": f"{assessment.risk_level}リスク",
                    "confidence_score": assessment.confidence,
                    "profile_adjusted_advice": {"advice_text": f"【{self.current_profile.upper()}】{primary_action}推奨（{action_strength}）- {reason}",
                                                "position_sizing": self._get_position_sizing_advice(primary_action, assessment.risk_level)},
                    "key_factors": [f"AIトレンド: {ai_trend:+.1f}%", f"市場トレンド: {assessment.trend}", f"信頼度: {assessment.confidence:.1%}",
                                    f"リスク: {assessment.risk_level}", f"AI信頼度: {assessment.ai_reliability:.1%}"],
                    "recommendations": self._get_basic_recommendations(primary_action), "warnings": warnings[:5]}
        except Exception as e:
            self.logger.error(f"投資アドバイス生成エラー: {e}")
            return {"error": str(e), "primary_action": "HOLD", "action_strength": "弱", "risk_assessment": "データ不足高リスク"}

    def _get_position_sizing_advice(self, action: str, risk_level: str) -> str:
        if action == "HOLD": return "現状維持"
        profile_multipliers = {"conservative": 0.5, "natural": 1.0, "aggressive": 1.5}
        risk_multipliers = {"low": 1.0, "medium": 0.8, "high": 0.5}
        multiplier = profile_multipliers.get(self.current_profile, 1.0) * risk_multipliers.get(risk_level, 0.8)
        return f"資金の{int(10 * multiplier)}%程度"

    def _get_basic_recommendations(self, action: str) -> List[str]:
        recs = {"BUY": ["ETF/インデックス投資検討", "ドルコスト平均法", "緊急資金確保"],
                "SELL": ["段階的利確検討", "現金ポジション増", "税務効率考慮"],
                "HOLD": ["現ポジション維持", "市場動向監視", "投資機会準備"]}
        return recs.get(action, recs["HOLD"])

    def generate_investment_advice(self) -> Dict[str, Any]:
        try:
            self.logger.info(f"投資アドバイスレポート生成開始 (プロファイル: {self.current_profile})")
            market_status = self._get_current_market_status()
            predictions, errors = self._get_ai_predictions_summary() # errors にはMAPE情報が入る
            tech_signals = self._get_technical_signals_summary()
            assessment = self._generate_comprehensive_market_assessment(market_status, predictions, errors, tech_signals)
            advice = self._generate_investment_advice_from_assessment(assessment)
            
            return {
                "metadata": {"generated_at": datetime.now().isoformat(), "profile": self.current_profile, "calculation_errors": self.calculation_errors},
                "market_analysis": {"current_status": market_status, "ai_predictions": predictions, 
                                    "ai_reliability": errors, # 変数名 errors はMAPE情報を含むのでそのまま使用
                                    "technical_signals": tech_signals},
                "assessment": {"overall_trend": assessment.trend, "confidence_score": assessment.confidence, "risk_level": assessment.risk_level,
                               "technical_score": assessment.tech_score, "ai_reliability": assessment.ai_reliability},
                "investment_advice": advice
            }
        except Exception as e: self.logger.error(f"投資アドバイス生成エラー: {e}"); return {"error": str(e)}

    def generate_investment_report(self, save_to_json: bool = False, print_to_console: bool = True) -> bool:
        try:
            self.logger.info("投資レポート生成を開始します")
            report_data = self.generate_investment_advice()
            if "error" in report_data: self.logger.error(f"レポート生成エラー: {report_data['error']}"); return False
            
            self._log_prediction_summary() # 予測価格のログ出力
            
            if print_to_console:
                # _display_enhanced_report は内部で _extract_prediction_prices を呼ぶので、
                # report_data['prediction_prices'] を事前にセットする必要はない。
                # report_data['timestamp'] も不要 (metadata内にあるか、_display_enhanced_report内で生成)
                self._display_enhanced_report(report_data) 
            
            if save_to_json:
                # _save_report_to_json は report_data を直接受け取る
                self._save_report_to_json(report_data)
            
            self.logger.info("投資レポート生成が正常に完了しました")
            return True
        except Exception as e: self.logger.error(f"レポート生成エラー: {e}"); return False

    def _print_report(self, data: Dict[str, Any]): # _display_enhanced_reportに置き換えられたため、基本的には不要
        self.logger.warning("_print_report は古いメソッドです。_display_enhanced_report を使用してください。")
        self._display_enhanced_report(data) # 互換性のために呼び出す

    def _save_report_to_json(self, report_data: Dict[str, Any]) -> bool:
        try:
            # metadataからprofile名を取得
            profile_name = report_data.get("metadata", {}).get("profile", self.current_profile)
            timestamp_str = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"investment_report_{profile_name}_{timestamp_str}.json"
            
            # 予測価格(_extract_prediction_pricesの結果)をレポートに含める (もし含まれていなければ)
            if 'prediction_prices' not in report_data: # _display_enhanced_report用に_extract_prediction_pricesが呼ばれるが、保存時にも確認
                 report_data['prediction_prices'] = self._extract_prediction_prices()

            return bool(self._save_analysis_report(report_data, filename))
        except Exception as e: self.logger.error(f"JSON保存エラー: {e}"); return False

    def _save_analysis_report(self, report_data: Dict[str, Any], filename: str) -> Optional[str]:
        def clean_data(obj): # NumPy/Pandas型をJSON互換にする
            if isinstance(obj, dict): return {k: clean_data(v) for k, v in obj.items()}
            elif isinstance(obj, list): return [clean_data(v) for v in obj]
            elif pd.isna(obj): return None
            elif isinstance(obj, (np.integer, np.floating)): return float(obj) # np.bool_ はjsonで True/False になる
            elif isinstance(obj, pd.Timestamp): return obj.isoformat()
            return obj
        try:
            cleaned_report_data = clean_data(report_data)
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(cleaned_report_data, f, ensure_ascii=False, indent=2, default=str) # default=strは最終手段
            self.logger.info(f"レポート保存: {filename}")
            return filename
        except Exception as e: self.logger.error(f"保存エラー ({filename}): {e}"); return None

    def validate_system(self) -> Dict[str, Any]:
        validation = {
            "market_data_loaded": self.sp500_df is not None and not self.sp500_df.empty,
            "ai_models_loaded": len(self.trained_models_results) > 0,
            "profile_valid": self.current_profile in UNIFIED_PROFILES, # (修正5) PROFILES -> UNIFIED_PROFILES
            "config_accessible": self._get_current_config() is not None, # (修正8) で実装済み
            "ai_predictions_working": False
        }
        try:
            predictions, _ = self._get_ai_predictions_summary()
            # キー名統一(修正7) long_term の trend_pct を確認
            long_term_trend = predictions.get("long_term", {}).get("trend_pct", 0)
            validation["ai_predictions_working"] = abs(long_term_trend) > 0.001 or \
                                                 (predictions.get("nextday", {}).get("price", 0) != 0) # nextday価格でも確認
        except Exception: pass
        validation["overall_valid"] = all(validation.values())
        return validation
