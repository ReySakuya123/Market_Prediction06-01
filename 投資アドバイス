@dataclass
class MarketAssessment:
    """市場評価の総合結果"""
    trend: str
    confidence: float
    risk_level: str
    tech_score: float
    ai_reliability: float

class InvestmentAdvisor:
    """AI予測修正版投資アドバイザー"""
    
    PROFILES = {
        "natural": {"buy_threshold": 3, "vix_threshold": 25, "ai_weight": 2.0},
        "aggressive": {"buy_threshold": 2, "vix_threshold": 30, "ai_weight": 1.5},
        "conservative": {"buy_threshold": 5, "vix_threshold": 20, "ai_weight": 3.0}
    }

    def __init__(self, market_data_dict: Dict, trained_models_results: Dict, 
                 logger_manager: LoggerManager, advisor_config_file: str = "advisor_config.json", 
                 initial_profile_name: str = "natural"):
        self.logger = logger_manager.get_logger(self.__class__.__name__)
        self.market_data_dict = market_data_dict
        self.trained_models_results = trained_models_results
        self.current_profile = initial_profile_name
        self.profile = self.PROFILES.get(initial_profile_name, self.PROFILES["natural"])
        self.sp500_df = self._get_sp500_data()
        self.calculation_errors = []
        
        # デバッグ情報出力
        self.logger.info(f"利用可能な市場データキー: {list(self.market_data_dict.keys())}")
        self.logger.info(f"利用可能なモデル結果キー: {list(self.trained_models_results.keys())}")
        
        # AI予測データの詳細デバッグ
        self._debug_ai_predictions_detailed()
        
        self.builtin_config = {
            "conservative": {"buy_threshold": 5, "vix_threshold": 20, "ai_weight": 3.0, "confidence_threshold": 0.8},
            "natural": {"buy_threshold": 3, "vix_threshold": 25, "ai_weight": 2.0, "confidence_threshold": 0.6},
            "aggressive": {"buy_threshold": 2, "vix_threshold": 30, "ai_weight": 1.5, "confidence_threshold": 0.4}
        }
        
        self.logger.info(f"InvestmentAdvisor初期化完了 - プロファイル: {self.current_profile}")

    def _extract_prediction_prices(self):
        """各モデルの予測価格を抽出"""
        prediction_prices = {}
        
        try:
            # nextdayモデルの予測価格
            if 'nextday' in self.trained_models_results:
                nextday_result = self.trained_models_results['nextday']
                if 'latest_prediction_original' in nextday_result:
                    nextday_pred = nextday_result['latest_prediction_original']
                    if isinstance(nextday_pred, (list, np.ndarray)) and len(nextday_pred) > 0:
                        prediction_prices['nextday'] = {
                            'price': round(float(nextday_pred[0]), 2),
                            'period': '翌日'
                        }
                    elif isinstance(nextday_pred, (int, float)):
                        prediction_prices['nextday'] = {
                            'price': round(float(nextday_pred), 2),
                            'period': '翌日'
                        }
            
            # shortモデルの予測価格（最終日）
            if 'short' in self.trained_models_results:
                short_result = self.trained_models_results['short']
                if 'latest_prediction_original' in short_result:
                    short_pred = short_result['latest_prediction_original']
                    if isinstance(short_pred, (list, np.ndarray)) and len(short_pred) > 0:
                        prediction_prices['short'] = {
                            'price': round(float(short_pred[-1]), 2),
                            'period': '20日後'
                        }
            
            # longモデルの予測価格（最終日）
            if 'long' in self.trained_models_results:
                long_result = self.trained_models_results['long']
                if 'latest_prediction_original' in long_result:
                    long_pred = long_result['latest_prediction_original']
                    if isinstance(long_pred, (list, np.ndarray)) and len(long_pred) > 0:
                        # 🔧 改善1: 長期予測の安定化処理を適用
                        raw_long_price = self._extract_long_term_prediction(long_pred)
                        
                        # 🔧 改善2: 現在価格を取得して妥当性チェック
                        current_price = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else 5900
                        validated_long_price = self._validate_prediction(current_price, raw_long_price, 'long')
                        
                        prediction_prices['long'] = {
                            'price': round(float(validated_long_price), 2),
                            'period': '30日後'  # 🔧 改善3: 100日後→30日後に変更（より現実的）
                        }
                        
            self.logger.info(f"予測価格抽出完了: {prediction_prices}")
            return prediction_prices
            
        except Exception as e:
            self.logger.error(f"予測価格抽出エラー: {e}")
            return {}

    def _extract_long_term_prediction(self, long_pred_array):
        """長期予測の安定化 - ノイズ削減のため最後の期間の平均を使用"""
        try:
            if isinstance(long_pred_array, (list, np.ndarray)) and len(long_pred_array) > 20:
                # 最後の20日間の平均を取る（極端な値を避ける）
                stable_pred = np.mean(long_pred_array[-20:])
                original_pred = long_pred_array[-1]
                self.logger.debug(f"長期予測安定化: 元値={original_pred:.2f} → 安定化値={stable_pred:.2f}")
                return stable_pred
            elif len(long_pred_array) > 0:
                return long_pred_array[-1]
            else:
                self.logger.warning("長期予測配列が空です")
                return 0
        except Exception as e:
            self.logger.error(f"長期予測抽出エラー: {e}")
            return long_pred_array[-1] if len(long_pred_array) > 0 else 0

    def _validate_prediction(self, current_price: float, predicted_price: float, prediction_type: str) -> float:
        """予測値の妥当性をチェックし、異常値を補正"""
        try:
            change_pct = ((predicted_price - current_price) / current_price) * 100
            
            # 妥当性の閾値設定（期間別）
            thresholds = {
                'nextday': (-5, 5),    # ±5%以内
                'short': (-15, 15),    # ±15%以内  
                'long': (-25, 25)      # ±25%以内
            }
            
            min_change, max_change = thresholds.get(prediction_type, (-30, 30))
            
            if change_pct < min_change or change_pct > max_change:
                self.logger.warning(f"{prediction_type}予測が異常値: {change_pct:.2f}% → 補正実行")
                # 異常値の場合は閾値内に補正
                corrected_change = np.sign(change_pct) * min(abs(change_pct), abs(max_change))
                corrected_price = current_price * (1 + corrected_change / 100)
                self.logger.info(f"{prediction_type}予測補正: {predicted_price:.2f} → {corrected_price:.2f}")
                return corrected_price
            
            self.logger.debug(f"{prediction_type}予測は妥当範囲内: {change_pct:.2f}%")
            return predicted_price
            
        except Exception as e:
            self.logger.error(f"予測値検証エラー: {e}")
            return current_price  # エラー時は現在価格を返す

    def _log_prediction_summary(self):
        """予測価格サマリーをログ出力"""
        try:
            prediction_prices = self._extract_prediction_prices()
            
            self.logger.info("=== AI予測価格サマリー ===")
            for model_name, pred_data in prediction_prices.items():
                self.logger.info(f"{model_name}モデル予測価格: ${pred_data['price']:,.2f} ({pred_data['period']})")
            
            # 現在価格との比較
            if not self.sp500_df.empty:
                current_price = self.sp500_df['Close'].iloc[-1]
                self.logger.info(f"現在価格: ${current_price:,.2f}")
                
                if 'nextday' in prediction_prices:
                    change = prediction_prices['nextday']['price'] - current_price
                    change_pct = (change / current_price) * 100
                    self.logger.info(f"翌日予測変化: ${change:+.2f} ({change_pct:+.2f}%)")
                    
        except Exception as e:
            self.logger.error(f"予測サマリーログエラー: {e}")

    def _display_enhanced_report(self, report_data: Dict[str, Any]):
        """強化されたレポート表示"""
        prediction_prices = self._extract_prediction_prices()
        
        print("\n" + "="*60)
        print("        🎯 AI投資分析レポート（強化版） 🎯")
        print("="*60)
        print(f"📅 生成日時: {report_data.get('timestamp', 'N/A')}")
        print(f"👤 投資プロファイル: {self.current_profile.upper()}")
        
        # AI予測価格セクションを追加
        print("\n🔮 【AI予測価格】")
        if 'nextday' in prediction_prices:
            print(f"翌日予測: ${prediction_prices['nextday']['price']:,.2f}")
        if 'short' in prediction_prices:
            print(f"短期予測（20日後）: ${prediction_prices['short']['price']:,.2f}")
        if 'long' in prediction_prices:
            print(f"長期予測（30日後）: ${prediction_prices['long']['price']:,.2f}") # 修正: 100日後→30日後
        
        # 既存のセクション
        assessment = report_data.get("assessment", {})
        advice = report_data.get("investment_advice", {})
        market = report_data.get("market_analysis", {}).get("current_status", {})
        ai_predictions = report_data.get("market_analysis", {}).get("ai_predictions", {})
        
        long_term = ai_predictions.get("long_term", {})
        ai_trend = long_term.get("trend_pct", 0)
        ai_confidence = long_term.get("confidence", 0)
        
        print(f"\n🤖 【AI予測分析】")
        print(f"長期トレンド予測: {ai_trend:+.2f}%")
        print(f"AI信頼度: {ai_confidence:.1%}")
        
        print(f"\n📊 【総合評価】")
        print(f"トレンド: {assessment.get('overall_trend', 'N/A').upper()}")
        print(f"信頼度: {assessment.get('confidence_score', 0):.1%}")
        print(f"リスク: {assessment.get('risk_level', 'N/A').upper()}")
        print(f"テクニカルスコア: {assessment.get('technical_score', 0):.2f}")
        print(f"AI信頼度: {assessment.get('ai_reliability', 0):.1%}")
        
        print(f"\n💡 【推奨アクション】")
        print(f"アクション: {advice.get('primary_action', 'N/A')}")
        print(f"強度: {advice.get('action_strength', 'N/A')}")
        
        profile_advice = advice.get("profile_adjusted_advice", {})
        if profile_advice:
            print(f"アドバイス: {profile_advice.get('advice_text', 'N/A')}")
            print(f"推奨ポジションサイズ: {profile_advice.get('position_sizing', 'N/A')}")
        
        key_factors = advice.get("key_factors", [])
        if key_factors:
            print(f"\n🔍 【主要判断要因】")
            for factor in key_factors:
                print(f"• {factor}")
        
        warnings = advice.get("warnings", [])
        if warnings:
            print(f"\n⚠️ 【警告・注意事項】")
            for i, warning in enumerate(warnings[:3], 1):
                print(f"{i}. {warning}")
        
        if market and "error" not in market:
            print(f"\n📈 【市場状況】")
            print(f"S&P500価格: ${market.get('current_price', 0):.2f}")
            print(f"日次変動: {market.get('daily_change', 0):+.2f}%")
            print(f"VIX指数: {market.get('VIX', 0):.1f} ({market.get('vix_level', 'N/A')})")
            print(f"5日ボラティリティ: {market.get('volatility_5d', 0):.1f}%")
        
        print("="*60)

    def _debug_ai_predictions_detailed(self):
        """AI予測データの詳細デバッグ"""
        self.logger.info("=== AI予測データ詳細分析 ===")
        for model_key, model_result in self.trained_models_results.items():
            self.logger.info(f"\n--- {model_key}モデル詳細 ---")
            if isinstance(model_result, dict):
                for key, value in model_result.items():
                    if isinstance(value, list):
                        if len(value) > 0:
                            self.logger.info(f"  {key}: List[{len(value)}] - 最後の3つ: {value[-3:]}")
                        else:
                            self.logger.info(f"  {key}: 空のリスト")
                    elif isinstance(value, (int, float)):
                        self.logger.info(f"  {key}: {value}")
                    else:
                        self.logger.info(f"  {key}: {type(value)}")
                
                # 特に重要なデータの詳細チェック
                if 'y_pred_original_test' in model_result and 'y_test_original_test' in model_result:
                    pred = model_result['y_pred_original_test']
                    actual = model_result['y_test_original_test']
                    if isinstance(pred, list) and isinstance(actual, list):
                        self.logger.info(f"  予測データ長: {len(pred)}, 実際データ長: {len(actual)}")
                        if len(pred) > 0 and len(actual) > 0:
                            self.logger.info(f"  最後の予測値: {pred[-1]}, 最後の実際値: {actual[-1]}")
                
                if 'latest_prediction_original' in model_result:
                    latest = model_result['latest_prediction_original']
                    self.logger.info(f"  最新予測値: {latest}")

    def _get_sp500_data(self) -> Optional[pd.DataFrame]:
        """S&P500データを安全に取得"""
        try:
            for key in ["^GSPC", "SP500", "SPX", "sp500"]:
                if key in self.market_data_dict:
                    data = self.market_data_dict[key]
                    if isinstance(data, dict) and "df" in data:
                        df = data["df"]
                        if df is not None and not df.empty:
                            self.logger.info(f"S&P500データ読み込み成功: {len(df)}行, 列: {list(df.columns)}")
                            return df
                    elif isinstance(data, pd.DataFrame) and not data.empty:
                        self.logger.info(f"S&P500データ読み込み成功: {len(data)}行, 列: {list(data.columns)}")
                        return data
            
            self.logger.error("S&P500データが見つかりません")
            return pd.DataFrame()
        except Exception as e:
            self.logger.error(f"S&P500データ取得エラー: {e}")
            return pd.DataFrame()

    # --- インデント修正：_calculate_dynamic_confidence をクラスメソッドとして正しい位置に移動 ---
    def _calculate_dynamic_confidence(self, mape: float, model_type: str) -> float:
        """MAPEとモデルタイプに基づく動的信頼度計算"""
        # ベース信頼度（MAPEベース）
        base_confidence = max(0.1, min(0.95, (100 - mape) / 100))
        
        # モデルタイプ別調整
        type_multiplier = {
            'nextday': 1.0,    # 短期予測は比較的信頼性高
            'short': 0.9,      # 中期予測は少し低下
            'long': 0.8        # 長期予測は更に低下
        }.get(model_type, 0.8)
        
        # 最終信頼度
        final_confidence = base_confidence * type_multiplier
        
        self.logger.debug(f"{model_type}信頼度: MAPE={mape:.2f}% → ベース={base_confidence:.2f} → 最終={final_confidence:.2f}")
        return max(0.1, min(0.9, final_confidence))

    def _calculate_ai_prediction_from_model_data(self, model_result: Dict, model_type: str) -> tuple[float, float]:
        """モデルデータから実際のAI予測を計算"""
        try:
            # パターン1: latest_prediction_originalがある場合
            if 'latest_prediction_original' in model_result:
                latest_pred = model_result['latest_prediction_original']
                if isinstance(latest_pred, (list, np.ndarray)) and len(latest_pred) > 0:
                    latest_pred = latest_pred[0] if model_type == 'nextday' else latest_pred[-1]
                
                if isinstance(latest_pred, (int, float)) and latest_pred != 0:
                    # 現在の価格を取得
                    current_price = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else latest_pred
                    
                    # 変化率計算
                    change_pct = ((latest_pred - current_price) / current_price) * 100
                    
                    # 信頼度計算（MAPEから）
                    mape = model_result.get('mape_test', 50)
                    # --- ここで _calculate_dynamic_confidence を呼び出す ---
                    confidence = self._calculate_dynamic_confidence(mape, model_type)
                    
                    self.logger.info(f"{model_type}: 最新予測={latest_pred:.2f}, 現在価格={current_price:.2f}, 変化率={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence
            
            # パターン2: y_pred_original_testとy_test_original_testから計算
            if 'y_pred_original_test' in model_result and 'y_test_original_test' in model_result:
                pred_data = model_result['y_pred_original_test']
                actual_data = model_result['y_test_original_test']
                
                if isinstance(pred_data, list) and isinstance(actual_data, list) and len(pred_data) > 0 and len(actual_data) > 0:
                    # 最新の予測と実際の値
                    latest_pred = pred_data[-1]
                    latest_actual = actual_data[-1] if len(actual_data) > 0 else latest_pred
                    
                    # 変化率計算
                    if latest_actual != 0:
                        change_pct = ((latest_pred - latest_actual) / latest_actual) * 100
                    else:
                        change_pct = 0
                    
                    # 信頼度計算（MAPEから）
                    mape = model_result.get('mape_test', 50)
                    # --- ここで _calculate_dynamic_confidence を呼び出す (必要に応じて) ---
                    # このパターンでは元の信頼度計算ロジックが異なる場合があるため、
                    # 必要であれば _calculate_dynamic_confidence を適用するか、既存のロジックを維持する
                    confidence = self._calculate_dynamic_confidence(mape, model_type) # ここも適用する場合
                    # confidence = max(0.1, min(0.9, (100 - mape) / 100)) # 元のロジック
                    
                    self.logger.info(f"{model_type}: 予測={latest_pred:.2f}, 実際={latest_actual:.2f}, 変化率={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence
            
            # パターン3: predict_stepを使用した将来予測
            if 'predict_step' in model_result:
                predict_step_val = model_result['predict_step'] # 変数名を変更 (predict_step との衝突回避)
                current_price = self.sp500_df['Close'].iloc[-1] if not self.sp500_df.empty else 5800
                
                # 簡易的な予測（実際のモデルロジックに基づいて調整が必要）
                # ここでは過去のトレンドベースの予測を行う
                if not self.sp500_df.empty and len(self.sp500_df) >= predict_step_val:
                    past_returns = self.sp500_df['Close'].pct_change().dropna().tail(predict_step_val)
                    avg_return = past_returns.mean()
                    predicted_price = current_price * (1 + avg_return * predict_step_val)
                    change_pct = ((predicted_price - current_price) / current_price) * 100
                    
                    mape = model_result.get('mape_test', 30)
                    # --- ここで _calculate_dynamic_confidence を呼び出す (必要に応じて) ---
                    confidence = self._calculate_dynamic_confidence(mape, model_type) # ここも適用する場合
                    # confidence = max(0.1, min(0.9, (100 - mape) / 100)) # 元のロジック
                    
                    self.logger.info(f"{model_type}: 段階予測={predict_step_val}, 変化率={change_pct:.2f}%, MAPE={mape:.2f}%")
                    return change_pct, confidence
            
            self.logger.warning(f"{model_type}: 予測データの計算に失敗")
            return 0.0, 0.5
            
        except Exception as e:
            self.logger.error(f"{model_type} AI予測計算エラー: {e}")
            return 0.0, 0.5

    @lru_cache(maxsize=1)
    def _get_ai_predictions_summary(self) -> tuple[Dict[str, Any], Dict[str, Any]]:
        """AI予測のサマリーを取得（キャッシュ版）"""
        predictions = {}
        errors = {}
        
        try:
            self.logger.info("=== AI予測サマリー生成開始（キャッシュ版） ===")
            
            # 各モデルの結果を個別に処理
            for model_key, model_result in self.trained_models_results.items():
                if not isinstance(model_result, dict):
                    continue
                
                self.logger.debug(f"処理中のモデル: {model_key}") # INFOからDEBUGに変更
                
                # AI予測を計算
                trend_pct, confidence = self._calculate_ai_prediction_from_model_data(model_result, model_key)
                
                # MAPE取得
                mape = model_result.get('mape_test', 50)
                errors[f"{model_key}_mape"] = mape
                
                # モデルタイプ別に分類
                if 'long' in model_key.lower():
                    predictions["long_term"] = {"trend_pct": trend_pct, "confidence": confidence}
                elif 'short' in model_key.lower():
                    predictions["short_term"] = {"trend_pct": trend_pct, "confidence": confidence}
                elif 'nextday' in model_key.lower() or 'next' in model_key.lower():
                    predictions["nextday_price"] = {"change_pct": trend_pct, "confidence": confidence}
                else:
                    # デフォルトは長期として扱う
                    predictions["long_term"] = {"trend_pct": trend_pct, "confidence": confidence}
            
            # 予測が空の場合の処理
            if not predictions.get("long_term"):
                # 最も信頼できるモデルから長期予測を生成
                best_model = None
                best_mape = float('inf')
                
                for model_key, model_result in self.trained_models_results.items():
                    if isinstance(model_result, dict) and 'mape_test' in model_result:
                        mape = model_result.get('mape_test', 100)
                        if mape < best_mape:
                            best_mape = mape
                            best_model = model_key
                
                if best_model:
                    trend_pct, confidence = self._calculate_ai_prediction_from_model_data(
                        self.trained_models_results[best_model], best_model
                    )
                    predictions["long_term"] = {"trend_pct": trend_pct, "confidence": confidence}
                    self.logger.info(f"最良モデル {best_model} から長期予測生成: {trend_pct:.2f}%")
            
            self.logger.info(f"最終的なAI予測: {predictions}")
            return predictions, errors
            
        except Exception as e:
            self.logger.error(f"AI予測サマリー取得エラー: {e}")
            return {}, {}

    def _get_vix_value(self) -> float:
        """VIX値を取得（S&P500データから直接取得を優先）"""
        try:
            # まずS&P500データ内のVIX列をチェック
            if not self.sp500_df.empty and 'VIX' in self.sp500_df.columns:
                vix_series = self.sp500_df['VIX'].dropna()
                if not vix_series.empty: # Check if series is not empty after dropna
                    vix_value = float(vix_series.iloc[-1])
                    self.logger.info(f"VIX値取得成功: {vix_value} (S&P500データから)")
                    return vix_value
            
            # 次に市場データ辞書から取得
            self.logger.info("=== VIX値取得開始 ===")
            self.logger.info(f"利用可能なキー: {list(self.market_data_dict.keys())}")
            
            for key in ["VIX", "^VIX", "vix", "volatility"]:
                if key in self.market_data_dict:
                    vix_data = self.market_data_dict[key]
                    self.logger.info(f"VIXキー '{key}' 発見: {type(vix_data)}")
                    
                    if isinstance(vix_data, dict):
                        if "df" in vix_data and isinstance(vix_data["df"], pd.DataFrame) and not vix_data["df"].empty:
                            vix_df = vix_data["df"]
                            if "Close" in vix_df.columns and not vix_df["Close"].dropna().empty:
                                vix_value = float(vix_df["Close"].dropna().iloc[-1])
                                self.logger.info(f"VIX値取得成功: {vix_value} (from df)")
                                return vix_value
                        elif "Close" in vix_data: # Assuming this is a direct value or list
                            close_data = vix_data["Close"]
                            if isinstance(close_data, list) and len(close_data) > 0:
                                vix_value = float(close_data[-1])
                                self.logger.info(f"VIX値取得成功: {vix_value} (from list)")
                                return vix_value
                            elif isinstance(close_data, (int, float)):
                                vix_value = float(close_data)
                                self.logger.info(f"VIX値取得成功: {vix_value} (from direct value in dict)")
                                return vix_value
                    elif isinstance(vix_data, (int, float)):
                        self.logger.info(f"VIX値取得成功: {vix_data} (direct)")
                        return float(vix_data)
                    elif isinstance(vix_data, pd.Series) and not vix_data.dropna().empty:
                        vix_value = float(vix_data.dropna().iloc[-1])
                        self.logger.info(f"VIX値取得成功: {vix_value} (from Series)")
                        return vix_value
            
            # S&P500データからボラティリティを計算
            if not self.sp500_df.empty and 'Close' in self.sp500_df.columns and len(self.sp500_df['Close']) >= 20 :
                returns = self.sp500_df['Close'].pct_change().dropna().tail(20)
                if not returns.empty:
                    volatility = returns.std() * np.sqrt(252) * 100
                    estimated_vix = min(80.0, max(10.0, volatility)) # Ensure float
                    self.logger.info(f"VIX推定値: {estimated_vix:.1f} (ボラティリティから計算)")
                    return estimated_vix
            
            self.logger.warning("VIX値が見つからないため、デフォルト値20.0を使用")
            return 20.0
            
        except Exception as e:
            self.logger.error(f"VIX取得エラー: {e}", exc_info=True) # Log traceback
            return 20.0

    def _calculate_technical_indicators(self) -> Dict[str, Any]:
        """テクニカル指標を計算（S&P500データから直接取得を優先）"""
        if self.sp500_df.empty:
            return {}
        
        try:
            tech_data = {}
            df_copy = self.sp500_df.copy() # Operate on a copy to avoid SettingWithCopyWarning
            
            # RSI
            if 'RSI' in df_copy.columns and not df_copy['RSI'].dropna().empty:
                current_rsi = df_copy['RSI'].dropna().iloc[-1]
                if pd.notna(current_rsi):
                    tech_data["rsi_current"] = float(current_rsi)
                    if current_rsi >= 70: tech_data["rsi_signal"] = "過買い"
                    elif current_rsi <= 30: tech_data["rsi_signal"] = "過売り"
                    else: tech_data["rsi_signal"] = "中立"
            elif 'Close' in df_copy.columns and len(df_copy['Close']) >= 15: # Need 14 periods for RSI + 1 for diff
                delta = df_copy['Close'].diff()
                gain = (delta.where(delta > 0, 0.0)).rolling(window=14, min_periods=1).mean()
                loss = (-delta.where(delta < 0, 0.0)).rolling(window=14, min_periods=1).mean()
                
                # Avoid division by zero for RS
                rs = gain / loss.replace(0, np.nan) # Replace 0 loss with NaN to avoid inf/nan issues in RS
                rs = rs.fillna(method='ffill').fillna(0) # Fill NaNs in RS, e.g., if loss was 0 for a period
                
                rsi = 100 - (100 / (1 + rs))
                if not rsi.dropna().empty:
                    current_rsi = rsi.dropna().iloc[-1]
                    if pd.notna(current_rsi):
                        tech_data["rsi_current"] = float(current_rsi)
                        if current_rsi >= 70: tech_data["rsi_signal"] = "過買い"
                        elif current_rsi <= 30: tech_data["rsi_signal"] = "過売り"
                        else: tech_data["rsi_signal"] = "中立"
            
            # 移動平均線
            if 'Close' in df_copy.columns and not df_copy['Close'].empty:
                current_price = df_copy['Close'].iloc[-1]
                ma_signals = {}
                ma_periods_to_check = {'MA5': 5, 'MA20': 20, 'MA50': 50, 'MA60': 60, 'MA120': 120}

                for ma_col, period in ma_periods_to_check.items():
                    if ma_col in df_copy.columns and not df_copy[ma_col].dropna().empty:
                        ma_value = df_copy[ma_col].dropna().iloc[-1]
                        if pd.notna(ma_value):
                            ma_signals[f"price_vs_{ma_col.lower()}"] = "above" if current_price > ma_value else "below"
                    elif len(df_copy['Close']) >= period:
                        # Calculate MA if not present and data is sufficient
                        df_copy[ma_col] = df_copy['Close'].rolling(window=period).mean()
                        if not df_copy[ma_col].dropna().empty:
                            ma_value = df_copy[ma_col].dropna().iloc[-1]
                            if pd.notna(ma_value):
                                ma_signals[f"price_vs_{ma_col.lower()}"] = "above" if current_price > ma_value else "below"
                
                # MA同士の比較 (MA5 vs MA20)
                ma5_val, ma20_val = None, None
                if 'MA5' in df_copy.columns and not df_copy['MA5'].dropna().empty: ma5_val = df_copy['MA5'].dropna().iloc[-1]
                if 'MA20' in df_copy.columns and not df_copy['MA20'].dropna().empty: ma20_val = df_copy['MA20'].dropna().iloc[-1]

                if pd.notna(ma5_val) and pd.notna(ma20_val):
                    ma_signals["ma5_vs_ma20"] = "above" if ma5_val > ma20_val else "below"
                
                if ma_signals: tech_data["ma_signals"] = ma_signals

            # ゴールデンクロス・デッドクロス
            if 'golden_cross' in df_copy.columns and 'death_cross' in df_copy.columns:
                recent_data = df_copy.tail(30)
                golden_cross_recent = recent_data['golden_cross'].any() if not recent_data['golden_cross'].empty else False
                death_cross_recent = recent_data['death_cross'].any() if not recent_data['death_cross'].empty else False
                
                if golden_cross_recent: tech_data["recent_cross"] = "golden"
                elif death_cross_recent: tech_data["recent_cross"] = "death"
                else: tech_data["recent_cross"] = "none"
            
            self.logger.info(f"テクニカル指標計算完了: {tech_data}")
            return tech_data
            
        except Exception as e:
            self.logger.error(f"テクニカル指標計算エラー: {e}", exc_info=True)
            return {}

    def _get_technical_signals_summary(self) -> Dict[str, Any]:
        """テクニカルシグナルのサマリー（改良版）"""
        try:
            summary = {
                "ma_cross_status": "MAクロスは30日以内になし",
                "total_buy_score": 0,
                "total_sell_score": 0,
                "recent_days_for_count": 15, # This seems unused in current logic but kept for now
                "rsi_signal": "中立"
            }
            
            tech_indicators = self._calculate_technical_indicators()
            summary.update(tech_indicators) # Update with calculated indicators
            
            buy_score = 0
            sell_score = 0
            
            if "rsi_signal" in tech_indicators:
                rsi_s = tech_indicators["rsi_signal"]
                if rsi_s == "過売り": buy_score += 3
                elif rsi_s == "過買い": sell_score += 3
                else: # Neutral RSI
                    rsi_val = tech_indicators.get("rsi_current", 50)
                    if rsi_val < 40: buy_score += 1
                    elif rsi_val > 60: sell_score += 1
            
            if "ma_signals" in tech_indicators:
                ma_s = tech_indicators["ma_signals"]
                above_count = sum(1 for k, v in ma_s.items() if k.startswith("price_vs_") and v == "above")
                below_count = sum(1 for k, v in ma_s.items() if k.startswith("price_vs_") and v == "below")
                
                if above_count > below_count: buy_score += above_count
                elif below_count > above_count : sell_score += below_count # Only score if one clearly dominates
                # else: neutral, no score change

                if ma_s.get("ma5_vs_ma20") == "above": buy_score += 1
                elif ma_s.get("ma5_vs_ma20") == "below": sell_score += 1 # Check for 'below' as well
            
            if "recent_cross" in tech_indicators:
                cross = tech_indicators["recent_cross"]
                if cross == "golden":
                    buy_score += 2
                    summary["ma_cross_status"] = "直近ゴールデンクロス発生"
                elif cross == "death":
                    sell_score += 2
                    summary["ma_cross_status"] = "直近デッドクロス発生"
            
            summary["total_buy_score"] = buy_score
            summary["total_sell_score"] = sell_score
            
            self.logger.info(f"テクニカルサマリー: 買い={buy_score}, 売り={sell_score}, RSI={summary.get('rsi_signal','N/A')}, MAクロス={summary.get('ma_cross_status','N/A')}")
            return summary
            
        except Exception as e:
            self.logger.error(f"テクニカル分析エラー: {e}", exc_info=True)
            return {"error": str(e)}

    def _generate_comprehensive_market_assessment(self, market_status: Dict, predictions: Dict, 
                                                  errors: Dict, tech_signals: Dict) -> MarketAssessment:
        """総合市場評価を生成（AI予測重視＋極端値抑制・重み調整版）"""
        try:
            # --- AI予測の信頼度補正（極端な値を抑制） ---
            corrected_predictions = {} # Store corrected predictions to avoid modifying input dict directly
            for period in ['nextday_price', 'short_term', 'long_term']:
                pred_key = 'change_pct' if period == 'nextday_price' else 'trend_pct'
                original_pred_data = predictions.get(period, {})
                corrected_pred_data = original_pred_data.copy() # Work on a copy

                trend_pct_val = corrected_pred_data.get(pred_key, 0)
                confidence = corrected_pred_data.get('confidence', 0.5)
                
                if abs(trend_pct_val) > 20:
                    corrected_pred_data['confidence'] = confidence * 0.5
                elif abs(trend_pct_val) > 10:
                    corrected_pred_data['confidence'] = confidence * 0.8
                corrected_predictions[period] = corrected_pred_data


            # --- 総合トレンドを加重平均で算出 ---
            weights = {'nextday_price': 0.4, 'short_term': 0.4, 'long_term': 0.2}
            weighted_trend = 0
            total_confidence_weight = 0 # Sum of (weight * confidence)
            total_base_weight = 0 # Sum of base weights for normalization

            for period, pred_data in corrected_predictions.items():
                if period not in weights: continue # Skip if no weight defined
                pred_key = 'change_pct' if period == 'nextday_price' else 'trend_pct'
                trend = pred_data.get(pred_key, 0)
                conf = pred_data.get('confidence', 0)
                
                current_weight_factor = weights[period]
                weighted_trend += trend * conf * current_weight_factor # Trend weighted by confidence and period_weight
                total_confidence_weight += conf * current_weight_factor
                total_base_weight += current_weight_factor


            final_trend = (weighted_trend / total_confidence_weight) if total_confidence_weight > 0 else 0
            # Normalize confidence by dividing sum of (conf*weight) by sum of (weights)
            final_confidence = (total_confidence_weight / total_base_weight) if total_base_weight > 0 else 0.5


            # --- トレンド判定 ---
            if final_trend < -3: trend_label = "bearish"
            elif final_trend > 3: trend_label = "bullish"
            else: trend_label = "neutral"

            # テクニカル分析スコア
            buy_score = tech_signals.get("total_buy_score", 0)
            sell_score = tech_signals.get("total_sell_score", 0)

            # テクニカルとAI予測の統合（重み付け改善）
            final_trend, final_confidence = self._resolve_prediction_conflicts(
    trend, final_trend, buy_score, sell_score, final_confidence
)
trend = final_trend

                # AI予測が大幅下落の場合はより慎重に
                if final_trend < -5: # If underlying AI trend was actually bearish despite label
                    trend_label = "bearish"
                    final_confidence *= 0.6
                else:
                    trend_label = "neutral"
                    final_confidence *= 0.8
            elif trend_label == "bearish" and buy_score > sell_score + 2: # Tech strongly disagrees
                if final_trend > 5: # If underlying AI trend was actually bullish
                    trend_label = "bullish"
                    final_confidence *= 0.6
                else:
                    trend_label = "neutral"
                    final_confidence *= 0.8
            elif trend_label == "neutral": # AI is neutral, let tech guide
                if buy_score > sell_score + 1:
                    trend_label = "bullish"
                    final_confidence = max(final_confidence, 0.55) # Boost confidence slightly
                elif sell_score > buy_score + 1:
                    trend_label = "bearish"
                    final_confidence = max(final_confidence, 0.55)

            # リスクレベル
            vix_value = market_status.get("VIX", 20.0) # Ensure float
            volatility_5d = market_status.get("volatility_5d", 0.0) # Ensure float
            risk_factors = 0
            if vix_value > 30: risk_factors += 3
            elif vix_value > 25: risk_factors += 2
            elif vix_value > 20: risk_factors += 1
            
            if volatility_5d > 25: risk_factors += 2
            elif volatility_5d > 15: risk_factors += 1
            
            if final_confidence < 0.4: risk_factors += 1
            
            # If trend is very strong but confidence is low, that's also a risk
            if abs(final_trend) > 7 and final_confidence < 0.5: risk_factors +=1


            if risk_factors >= 5: risk_level = "high"
            elif risk_factors >= 2: risk_level = "medium"
            else: risk_level = "low"

            # テクニカルスコア (0 to 1, 0.5 is neutral)
            tech_score = 0.5
            total_tech_signals = buy_score + sell_score
            if total_tech_signals > 0:
                tech_score = buy_score / total_tech_signals
            tech_score = max(0.0, min(1.0, tech_score))

            ai_reliability_score = max(0.1, min(0.9, final_confidence)) # Ensure within bounds

            result = MarketAssessment(
                trend=trend_label,
                confidence=ai_reliability_score, # Use the final AI confidence
                risk_level=risk_level,
                tech_score=tech_score,
                ai_reliability=ai_reliability_score 
            )
            self.logger.info(f"総合評価: {result.trend}, 信頼度={result.confidence:.2f}, リスク={result.risk_level}, AIトレンド値={final_trend:.2f}")
            return result

        except Exception as e:
            self.logger.error(f"総合市場評価の生成中にエラーが発生しました: {e}", exc_info=True)
            return MarketAssessment(
                trend="neutral", confidence=0.5, risk_level="medium",
                tech_score=0.5, ai_reliability=0.5
            )

    def _get_current_config(self) -> Dict[str, Any]:
        return self.builtin_config.get(self.current_profile, self.builtin_config["natural"])

    def _get_current_profile_name(self) -> str:
        return self.current_profile

    def _get_current_market_status(self) -> Dict[str, Any]:
        if self.sp500_df is None or self.sp500_df.empty or 'Close' not in self.sp500_df.columns:
            self.logger.error("S&P500データ不足または'Close'列なし。市場状況取得不可。")
            return {"error": "データ不足"}
        
        try:
            latest_row = self.sp500_df.iloc[-1]
            current_price = float(latest_row["Close"])
            
            daily_change = 0.0
            if len(self.sp500_df) > 1 and 'Close' in self.sp500_df.columns:
                prev_price = float(self.sp500_df["Close"].iloc[-2])
                if prev_price != 0: # Avoid division by zero
                    daily_change = ((current_price - prev_price) / prev_price) * 100
            
            vix_value = self._get_vix_value() # Already ensures float
            
            volatility_5d = 0.0
            if len(self.sp500_df) >= 6 and 'Close' in self.sp500_df.columns: # Need 6 rows for 5 pct_change values
                returns = self.sp500_df["Close"].pct_change().dropna().tail(5)
                if len(returns) == 5: # Ensure we have 5 returns
                    volatility_5d = float(returns.std() * np.sqrt(252) * 100)
            
            status = {
                "current_price": round(current_price, 2),
                "last_price_date": self.sp500_df.index[-1].strftime("%Y-%m-%d") if isinstance(self.sp500_df.index[-1], pd.Timestamp) else str(self.sp500_df.index[-1]),
                "volume": float(latest_row.get("Volume", 0.0)),
                "daily_change": round(daily_change, 2),
                "volatility_5d": round(volatility_5d, 2),
                "VIX": round(vix_value, 2),
                "vix_level": self._categorize_vix(vix_value)
            }
            
            self.logger.info(f"市場状況: 価格=${status['current_price']:.2f}, 変動={status['daily_change']:.2f}%, VIX={status['VIX']:.1f}")
            return status
            
        except Exception as e:
            self.logger.error(f"市場状況取得エラー: {e}", exc_info=True)
            return {"error": str(e)}

    def _categorize_vix(self, vix_value: float) -> str:
        if vix_value < 15: return "低位安定"
        elif vix_value < 25: return "通常範囲"
        elif vix_value < 35: return "警戒レベル"
        else: return "パニックレベル"

    def _generate_investment_advice_from_assessment(self, assessment: MarketAssessment) -> Dict[str, Any]:
        try:
            config = self._get_current_config()
            confidence_threshold = config.get("confidence_threshold", 0.6)
            
            predictions, _ = self._get_ai_predictions_summary()
            # Use the most relevant AI trend, e.g., long_term or a weighted average
            # For simplicity, using long_term here, but could be more sophisticated
            ai_long_term_pred = predictions.get("long_term", {})
            ai_trend_pct = ai_long_term_pred.get("trend_pct", 0.0)
            ai_trend_confidence = ai_long_term_pred.get("confidence", 0.5)

            primary_action = "HOLD"
            action_strength = "中"
            reason = "総合評価に基づき判断中"

            # Decision logic considering assessment trend, confidence, risk, and direct AI trend
            if assessment.confidence < confidence_threshold:
                primary_action = "HOLD"
                action_strength = "弱"
                reason = f"総合信頼度({assessment.confidence:.1%})が閾値({confidence_threshold:.1%})未満"
            
            elif assessment.trend == "bullish":
                if assessment.risk_level == "high":
                    primary_action = "HOLD" # High risk overrides bullish trend
                    action_strength = "中"
                    reason = "上昇トレンドだが高リスク環境"
                elif ai_trend_pct < -1.0 and ai_trend_confidence > 0.6: # AI strongly predicts decline despite bullish assessment
                    primary_action = "HOLD"
                    action_strength = "弱"
                    reason = f"総合評価は上昇だが、AIが下落を示唆(AI Trend: {ai_trend_pct:.1f}%)"
                else:
                    primary_action = "BUY"
                    action_strength = "強" if assessment.confidence > 0.75 and ai_trend_pct > 2.0 else "中"
                    reason = f"上昇トレンド確認 (総合トレンド: {assessment.trend}, AI Trend: {ai_trend_pct:.1f}%)"
            
            elif assessment.trend == "bearish":
                if assessment.risk_level == "high" and ai_trend_pct < -3.0 : # High risk and strong AI bearish
                     primary_action = "SELL"
                     action_strength = "強"
                     reason = f"下降トレンドかつ高リスク (総合トレンド: {assessment.trend}, AI Trend: {ai_trend_pct:.1f}%)"
                elif ai_trend_pct > 1.0 and ai_trend_confidence > 0.6: # AI strongly predicts rise despite bearish assessment
                    primary_action = "HOLD"
                    action_strength = "弱"
                    reason = f"総合評価は下降だが、AIが上昇を示唆(AI Trend: {ai_trend_pct:.1f}%)"
                else:
                    primary_action = "SELL"
                    action_strength = "中" # Default to medium for sell unless very strong signals
                    if assessment.confidence > 0.75 and ai_trend_pct < -2.0: action_strength = "強"
                    reason = f"下降トレンド確認 (総合トレンド: {assessment.trend}, AI Trend: {ai_trend_pct:.1f}%)"

            else: # Neutral assessment trend
                primary_action = "HOLD"
                if ai_trend_pct > 2.0 and ai_trend_confidence > 0.65 and assessment.risk_level != "high":
                    primary_action = "BUY"
                    action_strength = "弱"
                    reason = f"総合中立だがAIがやや強い上昇を示唆 (AI Trend: {ai_trend_pct:.1f}%)"
                elif ai_trend_pct < -2.0 and ai_trend_confidence > 0.65 :
                    primary_action = "SELL"
                    action_strength = "弱"
                    reason = f"総合中立だがAIがやや強い下落を示唆 (AI Trend: {ai_trend_pct:.1f}%)"
                else:
                    action_strength = "中"
                    reason = "明確なトレンドなし、またはAIシグナルが弱い"

            # Warnings
            warnings = []
            if ai_trend_pct < -5: warnings.append(f"🚨 AIが大幅下落を警告: {ai_trend_pct:.1f}%")
            elif ai_trend_pct < -2: warnings.append(f"⚠️ AIが下落を示唆: {ai_trend_pct:.1f}%")
            if ai_trend_pct > 5: warnings.append(f"📈 AIが大幅上昇を示唆: +{ai_trend_pct:.1f}%")
            
            if assessment.risk_level == "high": warnings.append("⚠️ 高リスク市場環境")
            if assessment.confidence < 0.4: warnings.append("⚠️ 総合予測信頼度が低い")
            if assessment.ai_reliability < 0.4: warnings.append("⚠️ AI自体の信頼性が低い可能性")
            
            warnings.extend([
                "投資は元本保証がありません。余裕資金での投資を心がけてください。",
                "このアドバイスは情報提供目的であり、投資の最終判断はご自身で行ってください。"
            ])
            
            return {
                "primary_action": primary_action,
                "action_strength": action_strength,
                "risk_assessment": f"{assessment.risk_level.upper()}リスク",
                "confidence_score": float(assessment.confidence), # Ensure float
                "profile_adjusted_advice": {
                    "advice_text": f"【{self.current_profile.upper()}】{primary_action}推奨（{action_strength}）- {reason}",
                    "position_sizing": self._get_position_sizing_advice(primary_action, assessment.risk_level)
                },
                "key_factors": [
                    f"AI長期予測: {ai_trend_pct:+.1f}% (信頼度: {ai_trend_confidence:.1%})",
                    f"総合市場トレンド評価: {assessment.trend.upper()}",
                    f"総合信頼度スコア: {assessment.confidence:.1%}",
                    f"市場リスクレベル: {assessment.risk_level.upper()}",
                    f"テクニカルスコア: {assessment.tech_score:.2f}"
                ],
                "recommendations": self._get_basic_recommendations(primary_action),
                "warnings": warnings[:5] # Limit warnings
            }
            
        except Exception as e:
            self.logger.error(f"投資アドバイス生成エラー: {e}", exc_info=True)
            return {
                "error": str(e), "primary_action": "HOLD", "action_strength": "弱",
                "risk_assessment": "データ不足により高リスク"
            }

    def _get_position_sizing_advice(self, action: str, risk_level: str) -> str:
        if action == "HOLD":
            return "現状維持"
        
        profile_multipliers = {"conservative": 0.5, "natural": 1.0, "aggressive": 1.5}
        risk_multipliers = {"low": 1.2, "medium": 0.8, "high": 0.4} # Adjusted risk multipliers
        
        base_size_pct = 5 # Base size as percentage of portfolio for this asset
        profile_mult = profile_multipliers.get(self.current_profile, 1.0)
        risk_mult = risk_multipliers.get(risk_level.lower(), 0.8) # ensure lower case for key
        
        recommended_size_pct = base_size_pct * profile_mult * risk_mult
        recommended_size_pct = round(max(1.0, min(20.0, recommended_size_pct)),1) # Cap between 1% and 20%
        
        return f"ポートフォリオの{recommended_size_pct}%程度"

    def _get_basic_recommendations(self, action: str) -> List[str]:
        recommendations = {
            "BUY": [
                "ETFやインデックスファンドでのS&P500への投資を検討。",
                "ドルコスト平均法による段階的な投資実行も一考。",
                "投資前に自身のポートフォリオ全体のリスク許容度を再確認。"
            ],
            "SELL": [
                "市場が不安定な場合は段階的な利確または損切りを検討。",
                "現金ポジションの増加でリスクヘッジも考慮。",
                "税務上の影響も考慮して売却タイミングを計画。"
            ],
            "HOLD": [
                "現在のポジションを維持し、市場動向を注視。",
                "急な市場変動に備え、追加投資や一部売却のシナリオを準備。",
                "関連ニュースや経済指標のチェックを継続。"
            ]
        }
        return recommendations.get(action, recommendations["HOLD"])


    def generate_investment_advice(self) -> Dict[str, Any]:
        try:
            self.logger.info(f"投資アドバイスレポート生成開始 (プロファイル: {self.current_profile})")
            
            market_status = self._get_current_market_status()
            if "error" in market_status: 
                self.logger.error(f"市場状況取得エラー: {market_status['error']}")
                return {"error": f"市場状況取得エラー: {market_status['error']}"}

            predictions, errors = self._get_ai_predictions_summary()
            if not predictions : # Check if predictions dict is empty
                self.logger.error("AI予測サマリーが空です。アドバイス生成不可。")
                return {"error": "AI予測サマリーが空"}
                
            tech_signals = self._get_technical_signals_summary()
            if "error" in tech_signals:
                self.logger.warning(f"テクニカル指標取得エラー: {tech_signals['error']}. 限定情報で評価継続。")
                # Provide default or empty tech_signals to proceed if acceptable
                # tech_signals = {"total_buy_score":0, "total_sell_score":0} 

            assessment = self._generate_comprehensive_market_assessment(
                market_status, predictions, errors, tech_signals
            )
            
            advice = self._generate_investment_advice_from_assessment(assessment)
            
            # Ensure all components are serializable for JSON
            # Numpy types need conversion, pandas timestamps too.
            def make_serializable(data):
                if isinstance(data, dict):
                    return {k: make_serializable(v) for k, v in data.items()}
                elif isinstance(data, list):
                    return [make_serializable(i) for i in data]
                elif isinstance(data, (np.floating, np.integer)):
                    return float(data) if isinstance(data, np.floating) else int(data)
                elif isinstance(data, np.ndarray):
                    return data.tolist()
                elif isinstance(data, pd.Timestamp):
                    return data.isoformat()
                # Add other types if necessary
                return data

            return make_serializable({
                "metadata": {
                    "generated_at": datetime.now().isoformat(),
                    "profile": self.current_profile,
                    "calculation_errors": self.calculation_errors # Ensure this is serializable
                },
                "market_analysis": {
                    "current_status": market_status,
                    "ai_predictions": predictions,
                    "ai_model_errors": errors, # Renamed from ai_reliability for clarity
                    "technical_signals": tech_signals
                },
                "assessment": {
                    "overall_trend": assessment.trend,
                    "confidence_score": assessment.confidence,
                    "risk_level": assessment.risk_level,
                    "technical_score": assessment.tech_score,
                    "ai_reliability": assessment.ai_reliability 
                },
                "investment_advice": advice
            })
            
        except Exception as e:
            self.logger.error(f"投資アドバイス生成の最上位でエラー: {e}", exc_info=True)
            return {"error": f"投資アドバイス生成エラー: {str(e)}"}

    def generate_investment_report(self, save_to_json: bool = False, print_to_console: bool = True) -> bool:
        try:
            self.logger.info("投資レポート生成を開始します")
            report_data = self.generate_investment_advice()
            
            if "error" in report_data:
                self.logger.error(f"レポート生成エラー: {report_data['error']}")
                if print_to_console: print(f"レポート生成エラー: {report_data['error']}")
                return False
            
            self._log_prediction_summary() # Log summary of extracted prices
            
            if print_to_console:
                # Add timestamp for display if not already there (generate_investment_advice adds it to metadata)
                report_data_display = report_data.copy()
                report_data_display['timestamp'] = report_data_display.get("metadata",{}).get("generated_at", datetime.now().isoformat())
                self._display_enhanced_report(report_data_display)
            
            if save_to_json:
                # Add extracted prediction prices to the report before saving if needed
                # report_data_save = report_data.copy() # Already serializable from generate_investment_advice
                # report_data_save['prediction_prices_extracted'] = self._extract_prediction_prices()
                self._save_report_to_json(report_data) # report_data should be serializable now
            
            self.logger.info("投資レポート生成が正常に完了しました")
            return True
        except Exception as e:
            self.logger.error(f"レポート生成プロセスエラー: {e}", exc_info=True)
            if print_to_console: print(f"レポート生成プロセスエラー: {e}")
            return False

    def _print_report(self, data: Dict[str, Any]): 
        # This method seems redundant if _display_enhanced_report is used.
        # Kept for reference or if a different format is needed.
        # Ensure it handles the structure of `data` from `generate_investment_advice`.
        print("\n" + "="*60)
        print("        🎯 AI投資分析レポート（デバッグ版） 🎯") # Changed title for distinction
        print("="*60)
        
        metadata = data.get("metadata", {})
        print(f"📅 生成日時: {metadata.get('generated_at', 'N/A')}")
        print(f"👤 投資プロファイル: {metadata.get('profile', 'N/A').upper()}")
        
        assessment = data.get("assessment", {})
        advice = data.get("investment_advice", {})
        market = data.get("market_analysis", {}).get("current_status", {})
        ai_predictions_summary = data.get("market_analysis", {}).get("ai_predictions", {}) # Actual summary
        
        # Displaying a specific AI prediction for simplicity (e.g., long_term)
        long_term_pred = ai_predictions_summary.get("long_term", {})
        ai_trend_display = long_term_pred.get("trend_pct", 0)
        ai_confidence_display = long_term_pred.get("confidence", 0)

        print(f"\n🤖 【AI予測概要】")
        print(f"長期トレンド予測 (AI): {ai_trend_display:+.2f}%")
        print(f"その信頼度 (AI): {ai_confidence_display:.1%}")
        
        print(f"\n📊 【総合評価】")
        print(f"評価トレンド: {assessment.get('overall_trend', 'N/A').upper()}")
        print(f"評価信頼度: {assessment.get('confidence_score', 0.0):.1%}") # Ensure float
        print(f"リスクレベル: {assessment.get('risk_level', 'N/A').upper()}")
        
        print(f"\n💡 【推奨アクション】")
        print(f"アクション: {advice.get('primary_action', 'N/A')}")
        print(f"強度: {advice.get('action_strength', 'N/A')}")
        
        if market and "error" not in market:
            print(f"\n📈 【市場状況】")
            print(f"S&P500価格: ${market.get('current_price', 0.0):.2f}")
            print(f"VIX指数: {market.get('VIX', 0.0):.1f}")
        
        print("="*60)


    def _save_report_to_json(self, report_data: Dict[str, Any]) -> bool:
        try:
            # Filename generation
            profile_name = self.current_profile or "unknown_profile"
            timestamp_str = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"investment_report_{profile_name}_{timestamp_str}.json"
            
            # The report_data from generate_investment_advice should already be serializable
            # If _save_analysis_report performs cleaning, it's fine.
            saved_path = self._save_analysis_report(report_data, filename)
            return bool(saved_path)
        except Exception as e:
            self.logger.error(f"JSON保存の呼び出しエラー: {e}", exc_info=True)
            return False

    def _save_analysis_report(self, report_data: Dict[str, Any], filename: str) -> Optional[str]:
        # The clean_data function from the previous context is assumed here.
        # If report_data is already cleaned by generate_investment_advice's make_serializable,
        # this clean_data might be redundant but harmless.
        def clean_data_for_json(obj): # Renamed to avoid conflict if defined globally
            if isinstance(obj, dict):
                return {k: clean_data_for_json(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [clean_data_for_json(v) for v in obj]
            elif pd.isna(obj): return None
            elif isinstance(obj, (np.integer, np.floating, np.bool_)): # Added np.bool_
                return (float(obj) if isinstance(obj, np.floating) 
                        else int(obj) if isinstance(obj, np.integer) 
                        else bool(obj))
            elif isinstance(obj, pd.Timestamp): return obj.isoformat()
            # Standard Python types that are JSON serializable
            elif isinstance(obj, (str, int, float, bool, type(None))):
                return obj
            # Fallback for other types: convert to string
            else:
                # self.logger.warning(f"Unserializable type {type(obj)} found, converting to string.")
                return str(obj)
        
        try:
            # It's better if generate_investment_advice ensures serializability.
            # If not, clean_data_for_json is a fallback.
            # cleaned_report_data = clean_data_for_json(report_data) 
            
            # Assuming report_data is already serializable by generate_investment_advice
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, ensure_ascii=False, indent=2) # Removed default=str
            self.logger.info(f"レポート保存成功: {filename}")
            return filename
        except TypeError as te: # Catch TypeError specifically if dump fails
            self.logger.error(f"JSONシリアライズエラー ({filename}): {te}. データ型を確認してください。", exc_info=True)
            # Attempt to save with a more aggressive cleaner if TypeError occurs
            try:
                self.logger.warning("シリアライズエラーのため、より積極的なクリーンアップで再試行します...")
                cleaned_report_data_aggressive = clean_data_for_json(report_data)
                with open(filename, 'w', encoding='utf-8') as f:
                     json.dump(cleaned_report_data_aggressive, f, ensure_ascii=False, indent=2)
                self.logger.info(f"レポート保存成功 (積極的クリーンアップ後): {filename}")
                return filename
            except Exception as e_aggressive:
                self.logger.error(f"積極的クリーンアップ後も保存エラー ({filename}): {e_aggressive}", exc_info=True)
                return None

        except Exception as e:
            self.logger.error(f"ファイル保存一般エラー ({filename}): {e}", exc_info=True)
            return None


    def validate_system(self) -> Dict[str, Any]:
        validation = {
            "market_data_loaded": self.sp500_df is not None and not self.sp500_df.empty,
            "ai_models_loaded": bool(self.trained_models_results), # Check if dict is not empty
            "profile_valid": self.current_profile in self.PROFILES,
            "config_accessible": self._get_current_config() is not None,
            "ai_predictions_functional": False, # Default to False
            "vix_value_retrieved": False,
            "technical_indicators_calculated": False,
        }
        
        try:
            preds, errors = self._get_ai_predictions_summary()
            # Check if predictions dict has expected keys and non-default values
            if preds and "long_term" in preds and "trend_pct" in preds["long_term"]:
                 # Could add a check for non-zero or non-default trend_pct
                 validation["ai_predictions_functional"] = True
            if errors: # e.g. check if errors dict is populated as expected
                pass # Add specific checks for errors if needed
        except Exception as e:
            self.logger.warning(f"システム検証中、AI予測サマリー取得エラー: {e}")
        
        try:
            vix = self._get_vix_value()
            if vix is not None and isinstance(vix, float): # Check if a float value was returned
                validation["vix_value_retrieved"] = True
        except Exception as e:
            self.logger.warning(f"システム検証中、VIX値取得エラー: {e}")

        try:
            tech_signals = self._get_technical_signals_summary()
            if tech_signals and "error" not in tech_signals : # Check if dict is not empty and no error
                validation["technical_indicators_calculated"] = True
        except Exception as e:
            self.logger.warning(f"システム検証中、テクニカル指標取得エラー: {e}")

        validation["overall_system_health"] = all(
            v for k, v in validation.items() if k != "overall_system_health" # Exclude self-reference
        )
        self.logger.info(f"システム検証結果: {validation}")
        return validation
