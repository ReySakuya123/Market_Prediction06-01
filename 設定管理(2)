
class Config:
    """設定管理クラス (メイン設定ファイル config.json 用)"""

    # デフォルト設定のキー名はconfig.jsonのキー名と一致させる
    # (JSONのキーはキャメルケースやスネークケースが混在しているが、それをそのまま使う)
    DEFAULT_CONFIG = {
        "market_index_info": {
            "^GSPC": "S&P500指数",
            "^DJI": "NYダウ平均株価指数"
        },
        "csv_files": {
            "^GSPC": r"C:\Users\ds221k10159\Desktop\MymarketProject\Finance_Data\GSPC_ohlcv_5y_1d.csv",
            "^DJI": r"C:\Users\ds221k10159\Desktop\MymarketProject\Finance_Data\DJI_close_5y_1d.csv",
            "^VIX": r"C:\Users\ds221k10159\Desktop\MymarketProject\Finance_Data\VIX_close_5y_1d.csv"
        }, # カンマを追加
        "data_source_settings": {
            "fetch_period_years": "5y",
            "fetch_interval_days": "1d",
            "max_download_retries": 3,
            "download_retry_wait_seconds": 60,
            "wait_seconds_between_tickers": 15,
            "bulk_download_fail_wait_seconds": 180,
            "minimum_required_data_rows": 500,
            "data_backup_directory": "data_backup",
            "data_backup_max_age_days": 0
        },
        "feature_engineering_settings": {
            "use_vix_feature": True,
            "use_dji_for_gspc_feature": True,
            "technical_indicators_to_add": ["MA", "RSI", "MACD", "BB", "ATR", "CrossSignals"],
            "ma_windows": [5, 20, 60, 120],
            "rsi_window": 14,
            "bb_window": 20,
            "bb_std_dev": 2,
            "atr_window": 14,
            "macd_fast_period": 12,
            "macd_slow_period": 26,
            "macd_signal_period": 9,
        },
        # ai_prediction_weights と investment_decision_overrides をトップレベルに移動し、重複を削除
        "ai_prediction_weights": {
            "nextday_weight": 0.4,
            "short_term_weight": 0.4,
            "long_term_weight": 0.2,
            "ai_confidence_threshold": 0.6,
            "extreme_prediction_threshold": 3.0  # %で下落予測時の警告閾値
        },
        "investment_decision_overrides": {
            "max_ai_decline_for_buy": -2.0,  # AI予測がこれ以下でBUY推奨しない
            "confidence_reliability_unified": True  # 信頼度計算統一フラグ
        },
        "model_training_settings": {
            "random_seed": 42,
            "lstm_input_columns_for_gspc": ["^GSPC", "VIX", "^DJI"],
            "train_test_split_ratio": 0.8,
            "hyperparameter_optimization_time_steps": 60,
            "hyperparameter_optimization_epochs": 50,
            "hyperparameter_optimization_early_stopping_patience": 10,
            "model_training_early_stopping_patience": 15,
            "default_optimizer_algorithm": "adam",
            "default_learning_rate": 0.001,
            "default_loss_function": "mean_squared_error",
            "model_save_path_template": "models/model_{ticker}_{name}.keras",
            # model_training_settings 内の重複する ai_prediction_weights と investment_decision_overrides を削除
            "sp500_prediction_model_configs": {
                "nextday": {
                    "input_time_steps": 60, "prediction_horizon_days": 1, "lstm_layers_count": 1,
                    "use_optuna_params": True, "training_epochs": 50, "training_batch_size": 64
                },
                "short": {
                    "input_time_steps": 60, "prediction_horizon_days": 20, "lstm_layers_count": 1,
                    "lstm_units_per_layer": 64, "lstm_dropout_rate": 0.2,
                    "training_epochs": 75, "training_batch_size": 64
                },
                "long": {
                    "input_time_steps": 120, "prediction_horizon_days": 30, "lstm_layers_count": 2,
                    "lstm_units_per_layer": 64, "lstm_dropout_rate": 0.2,
                    "training_epochs": 80, "training_batch_size": 32
                }
            }
        },
        "hyperparameter_optimization_settings": {
            "default_optuna_trials": 50,
            "load_best_hyperparameters_file": "best_lstm_params.json",
            "optuna_lstm_units_choices": [32, 64, 96, 128],
            "optuna_n_lstm_layers_range": [1, 2],
            "optuna_dropout_rate_range": [0.1, 0.5],
            "optuna_learning_rate_range": [1e-4, 1e-2],
            "optuna_batch_size_choices": [32, 64, 128]
        },
        "visualization_settings": {
            "plot_recent_days_count": 365,
            "plot_save_filename_template": "market_prediction_{ticker}.png",
            "plot_download_directory_candidates": ["Downloads", "ダウンロード", "."],
            "correlation_matrix_features": ["Close", "^DJI", "VIX", "RSI", "MACD_diff"],
            "plot_image_dpi": 300
        }
    }


    def __init__(self, config_file: str = "config.json", logger_manager: Optional[LoggerManager] = None):
        self.logger = (logger_manager or APP_LOGGER_MANAGER).get_logger(self.__class__.__name__)
        self.config_data = self._load_config(config_file)
        self.logger.info(f"メイン設定を '{config_file}' からロードしました。")

    def _deep_update(self, source: Dict, overrides: Dict) -> Dict:
        """ネストされた辞書を再帰的に更新するヘルパー関数"""
        for key, value in overrides.items():
            if isinstance(value, dict) and key in source and isinstance(source[key], dict):
                source[key] = self._deep_update(source[key], value)
            else:
                source[key] = value
        return source

    def _load_config(self, config_file: str) -> Dict[str, Any]:
        config_to_use = self.DEFAULT_CONFIG.copy() # まずデフォルトをコピー
        try:
            if os.path.exists(config_file):
                with open(config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # デフォルト設定をロードした設定で上書き (ネスト対応)
                    config_to_use = self._deep_update(config_to_use, loaded_config)
                    self.logger.debug(f"設定ファイル '{config_file}' の内容でデフォルト設定を更新しました。")
            else:
                self.logger.info(f"設定ファイル '{config_file}' が見つかりません。デフォルト設定を使用します。")
        except json.JSONDecodeError as e:
            self.logger.warning(f"設定ファイル '{config_file}' のJSONパースエラー: {e}。デフォルト設定を使用します。")
        except IOError as e:
            self.logger.warning(f"設定ファイル '{config_file}' の読み込みIOエラー: {e}。デフォルト設定を使用します。")
        except Exception as e:
            self.logger.error(f"設定ファイル '{config_file}' の読み込み中に予期せぬエラー: {e}。デフォルト設定を使用します。", exc_info=True)
        return config_to_use

    def get(self, key_path: str, default: Any = None) -> Any:
        """ドット区切りのキーパスで設定値を取得する。"""
        keys = key_path.split('.')
        value = self.config_data
        try:
            for key in keys:
                if isinstance(value, dict):
                    value = value[key]
                else: # パスの途中でdictでなくなった場合
                    # self.logger.debug(f"Configキー '{key_path}' の探索中、'{key}' の手前で非dict型に到達しました。")
                    return default
            return value
        except KeyError:
            # self.logger.debug(f"Configキー '{key_path}' が設定内に見つかりませんでした。デフォルト値 '{default}' を返します。")
            return default
        except Exception as e: # 予期せぬエラー
            self.logger.error(f"Configキー '{key_path}' の取得中に予期せぬエラー: {e}", exc_info=True)
            return default

