
class MarketPredictionSystem:
    """金融市場予測システムのメインクラス"""

    def __init__(
        self, config_file: str = "config.json", advisor_config_file: str = "advisor_config.json",
        logger_manager: LoggerManager = APP_LOGGER_MANAGER, # 外部からLoggerManagerを注入可能に
        reuse_hyperparams_on_init: bool = False,
        data_source_type: str = "api" # "api" or "csv"
    ):
        self.logger_manager = logger_manager
        self.logger = self.logger_manager.get_logger(self.__class__.__name__)
        self.logger.info(f"システム初期化開始。メイン設定: {config_file}, アドバイザー設定: {advisor_config_file}, データソース: {data_source_type}")

        self.config = Config(config_file, logger_manager=self.logger_manager)

        # HTTPセッション (DataFetcher API用)
        self.http_session: Optional[Any] = None # CurlSessionのインスタンス
        if CurlSession: # グローバルCurlSessionが定義されていれば
            try:
                if CurlSession.__module__.startswith("curl_cffi"):
                    self.http_session = CurlSession(impersonate="chrome110")
                    self.logger.info("HTTPセッションに curl_cffi.requests.Session を使用します。")
                else:
                    self.http_session = CurlSession()
                    self.logger.info("HTTPセッションに requests.Session を使用します。")
            except Exception as e:
                self.logger.warning(f"グローバルCurlSessionからのHTTPセッション初期化に失敗: {e}")
        else:
            self.logger.warning("CurlSessionエイリアスが未定義。APIベースのDataFetcherはHTTPセッションなしで動作します。")

        # データフェッチャーの選択
        self.data_source_type = data_source_type.lower()
        if self.data_source_type == "csv":
            self.data_fetcher: Union[CSVDataFetcher, DataFetcher] = CSVDataFetcher(self.config, self.logger_manager)
            self.logger.info("CSVDataFetcher を使用します。")
        elif self.data_source_type == "api":
            self.data_fetcher = DataFetcher(self.config, self.logger_manager, session=self.http_session)
            self.logger.info("DataFetcher (APIベース) を使用します。")
        else:
            self.logger.error(f"無効なデータソースタイプ: {data_source_type}。'api' または 'csv' を指定してください。APIをデフォルトとします。")
            self.data_fetcher = DataFetcher(self.config, self.logger_manager, session=self.http_session) # フォールバック

        self.feature_engineering = FeatureEngineering(self.config, self.logger_manager)
        self.lstm_model = LSTMModel(self.config, self.logger_manager)
        self.visualizer = MarketVisualizer(self.config, self.logger_manager)
        self.advisor_config_file = advisor_config_file # InvestmentAdvisor初期化時に渡す

        if reuse_hyperparams_on_init:
            self.lstm_model.load_best_params()

        self.market_data_store: Dict[str, Any] = {}
        self.trained_models_store: Dict[str, Any] = {}


    def run(
        self, force_hyperparam_optimization: bool = False,
        optimization_n_trials: Optional[int] = None,
        generate_report_profile: str = "natural"
    ) -> bool:
        self.logger.info(f"システム実行開始。最適化強制:{force_hyperparam_optimization}, Optuna試行:{optimization_n_trials or 'デフォルト'}, レポートプロファイル:{generate_report_profile}")
        run_start_time = datetime.now()
        overall_success = False
        try:
            # 1. データ取得
            self.logger.info("--- データ取得フェーズ開始 ---")
            self.market_data_store = self.data_fetcher.fetch_all_indexes()
            if not self.market_data_store or "^GSPC" not in self.market_data_store or self.market_data_store["^GSPC"]["df"].empty:
                self.logger.critical("主要市場データ(S&P500)取得失敗。システム続行不可。")
                return False
            self.logger.info("データ取得フェーズ完了。")

            # 2. 特徴量エンジニアリング
            self.logger.info("--- 特徴量エンジニアリングフェーズ開始 ---")
            self.market_data_store = self.feature_engineering.add_technical_indicators(self.market_data_store)
            self.logger.info("特徴量エンジニアリングフェーズ完了。")

            # 3. ハイパーパラメータ最適化 (S&P500対象)
            if force_hyperparam_optimization or (not self.lstm_model.best_params and self.lstm_model.load_best_params() is False) : # ロード試行してダメなら
                self.logger.info("--- LSTMハイパーパラメータ最適化フェーズ開始 (S&P500) ---")
                if "^GSPC" in self.market_data_store and not self.market_data_store["^GSPC"]["df"].empty:
                    self.lstm_model.optimize_hyperparameters(self.market_data_store, target_ticker="^GSPC", n_trials=optimization_n_trials)
                else: self.logger.warning("S&P500データ不十分で最適化スキップ。")
                self.logger.info("ハイパーパラメータ最適化フェーズ完了。")
            else: self.logger.info("既存ハイパーパラメータ使用または最適化要求なし。")

            # 4. LSTMモデル学習 (S&P500対象)
            self.logger.info("--- LSTMモデル学習フェーズ開始 (S&P500) ---")
            if "^GSPC" in self.market_data_store and not self.market_data_store["^GSPC"]["df"].empty:
                if not self.lstm_model.best_params: self.lstm_model.load_best_params() # 再度ロード試行
                self.trained_models_store = self.lstm_model.train_models_for_sp500(self.market_data_store)
            else: self.logger.error("S&P500データ不十分でLSTM学習スキップ。")
            self.logger.info("LSTMモデル学習フェーズ完了。")

            # 5. 可視化 (S&P500対象)
            self.logger.info("--- 可視化フェーズ開始 (S&P500) ---")
            if "^GSPC" in self.market_data_store and self.trained_models_store:
                graph_path = self.visualizer.plot_predictions_for_sp500(self.market_data_store, self.trained_models_store)
                if graph_path: self.logger.info(f"分析グラフを {graph_path} に保存。")
                else: self.logger.warning("グラフ生成/保存失敗。")
            else: self.logger.warning("S&P500データまたは学習済モデルなし。可視化スキップ。")
            self.logger.info("可視化フェーズ完了。")

            # 6. 投資アドバイス生成 (S&P500対象)
            self.logger.info("--- 投資アドバイス生成フェーズ開始 (S&P500) ---")
            if "^GSPC" in self.market_data_store and self.trained_models_store:
                advisor = InvestmentAdvisor(
                    self.market_data_store, self.trained_models_store, self.logger_manager,
                    self.advisor_config_file, generate_report_profile
                )
                if not advisor.generate_investment_report(save_to_json=True, print_to_console=True):
                    self.logger.warning("投資アドバイスレポート生成失敗。")
            else: self.logger.warning("S&P500データまたは学習済モデルなし。投資アドバイス生成スキップ。")
            self.logger.info("投資アドバイス生成フェーズ完了。")
            overall_success = True

        except KeyboardInterrupt:
            self.logger.warning("ユーザーにより処理が中断されました。")
        except Exception as e:
            self.logger.critical(f"システム実行中に致命的エラー: {e}", exc_info=True)
        finally:
            self.logger_manager.save_performance_log() # パフォーマンスログ保存
            duration_sec = (datetime.now() - run_start_time).total_seconds()
            self.logger.info(f"市場予測システム全処理終了。所要時間: {duration_sec:.2f}秒。成功: {overall_success}")
        return overall_success


# --- Jupyter Notebook / スクリプト実行のためのメイン処理部分 ---
if __name__ == "__main__":
    # グローバルなLoggerManagerインスタンスを使用
    main_logger = APP_LOGGER_MANAGER.get_logger("MainExecution")
    main_logger.info("アプリケーション実行開始。")

    # --- 設定ファイルパス (必要に応じて変更) ---
    main_config_path = "config.json"
    advisor_config_path = "advisor_config.json"
    # config.jsonのサンプル (上記デフォルト設定を参考に作成してください)
    # advisor_config.jsonのサンプル (上記デフォルト設定を参考に作成してください)

    # Jupyter Notebook環境かどうかでUIを分岐
    is_jupyter = False
    try:
        # Jupyter環境でのみ成功するインポート
        from IPython import get_ipython
        if get_ipython() is not None and 'IPKernelApp' in get_ipython().config:
            is_jupyter = True
            import ipywidgets as widgets
            from IPython.display import display, clear_output
            main_logger.info("Jupyter Notebook環境を検出。ipywidgets UIを使用します。")
    except ImportError:
        main_logger.info("Jupyter Notebook環境ではないか、ipywidgetsがありません。CUIモードで実行します。")


    if is_jupyter:
        # --- Jupyter UI ---
        data_source_selector_ui = widgets.ToggleButtons(
            options=[('API (yfinance)', 'api'), ('ローカルCSV', 'csv')], description='データソース:', value='api',
            style={'button_width': 'auto'}, tooltips=['yfinance経由で最新データを取得', '事前に用意したCSVファイルを使用']
        )
        hyperparam_mode_selector_ui = widgets.ToggleButtons(
            options=[('新規最適化', 'optimize'), ('保存パラメータ流用', 'reuse')], description='ハイパーパラメータ:', value='reuse',
            style={'button_width': 'auto'}
        )
        optuna_trials_input_ui = widgets.IntText(
            value=APP_LOGGER_MANAGER.get_logger("UI_Config").info("Optuna試行回数のデフォルト値はConfigから取得を推奨") or 5, # configから取得したい
            description='Optuna試行回数:', disabled=(hyperparam_mode_selector_ui.value == 'reuse')
        )
        def handle_hyperparam_mode_change(change): optuna_trials_input_ui.disabled = (change.new == 'reuse')
        hyperparam_mode_selector_ui.observe(handle_hyperparam_mode_change, names='value')

        # アドバイザープロファイルはAdvisorConfigLoaderから動的に取得したい
        # ここでは仮のリストを使用。システム実行時にAdvisorConfigLoaderが初期化されるので、その時点で取得するのが理想
        temp_advisor_loader = AdvisorConfigLoader(advisor_config_path, APP_LOGGER_MANAGER)
        profile_options_ui = [(p.capitalize(), p) for p in temp_advisor_loader.get_profile_list()]
        if not profile_options_ui: profile_options_ui = [('Natural', 'natural')] # フォールバック

        advisor_profile_selector_ui = widgets.Dropdown(
            options=profile_options_ui, value=profile_options_ui[0][1] if profile_options_ui else 'natural',
            description='投資判断プロファイル:', style={'description_width': 'initial'}
        )
        run_button_ui = widgets.Button(description='市場予測システム実行', button_style='success', icon='cogs')
        output_area_ui = widgets.Output()

        display(data_source_selector_ui, hyperparam_mode_selector_ui, optuna_trials_input_ui, advisor_profile_selector_ui, run_button_ui, output_area_ui)

        def on_run_button_clicked_ui(b):
            with output_area_ui:
                clear_output(wait=True)
                main_logger.info("--- UIからシステム実行開始 ---")
                data_src = data_source_selector_ui.value
                force_opt = (hyperparam_mode_selector_ui.value == 'optimize')
                opt_trials = optuna_trials_input_ui.value if force_opt else None
                report_prof = advisor_profile_selector_ui.value

                system = MarketPredictionSystem(
                    main_config_path, advisor_config_path, APP_LOGGER_MANAGER,
                    reuse_hyperparams_on_init=(not force_opt), data_source_type=data_src
                )
                success = system.run(force_opt, opt_trials, report_prof)
                print(f"\n🎉 システム実行 {'正常完了' if success else 'でエラー発生'} 🎉" if success else "\n💥 システム実行中にエラーが発生しました 💥")
        run_button_ui.on_click(on_run_button_clicked_ui)

    else:
        # --- CUIフォールバック ---
        print("="*30 + "\n金融市場予測システム (CUIモード)\n" + "="*30)
        ds_input = input("データソースを選択 [api, csv] (デフォルト: api): ").strip().lower() or "api"
        mode_input = input("ハイパーパラメータモードを選択 [optimize, reuse] (デフォルト: reuse): ").strip().lower() or "reuse"
        force_opt_cui = (mode_input == "optimize")
        opt_trials_cui_val = None
        if force_opt_cui:
            try: opt_trials_cui_val = int(input("Optuna試行回数を入力 (デフォルト: 5): ").strip() or "5")
            except ValueError: opt_trials_cui_val = 5

        # アドバイザープロファイル (CUI)
        temp_advisor_loader_cui = AdvisorConfigLoader(advisor_config_path, APP_LOGGER_MANAGER)
        profiles_cui = temp_advisor_loader_cui.get_profile_list()
        profile_prompt = f"投資判断プロファイルを選択 [{', '.join(profiles_cui)}] (デフォルト: {profiles_cui[0] if profiles_cui else 'natural'}): "
        profile_input_cui = input(profile_prompt).strip().lower() or (profiles_cui[0] if profiles_cui else 'natural')
        if profile_input_cui not in profiles_cui and profiles_cui : profile_input_cui = profiles_cui[0] # 不正入力時は先頭

        system_cui = MarketPredictionSystem(
            main_config_path, advisor_config_path, APP_LOGGER_MANAGER,
            reuse_hyperparams_on_init=(not force_opt_cui), data_source_type=ds_input
        )
        system_cui.run(force_opt_cui, opt_trials_cui_val, profile_input_cui)

    main_logger.info("アプリケーション実行終了。")
